"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  all_layers: () => all_layers,
  any_soup_element: () => any_soup_element,
  any_source_component: () => any_source_component,
  cad_component: () => cad_component,
  capacitance: () => capacitance,
  current: () => current,
  distance: () => distance,
  inductance: () => inductance,
  layer_ref: () => layer_ref,
  layer_string: () => layer_string,
  length: () => length,
  pcb_board: () => pcb_board,
  pcb_component: () => pcb_component,
  pcb_fabrication_note_path: () => pcb_fabrication_note_path,
  pcb_fabrication_note_text: () => pcb_fabrication_note_text,
  pcb_hole: () => pcb_hole,
  pcb_placement_error: () => pcb_placement_error,
  pcb_plated_hole: () => pcb_plated_hole,
  pcb_port: () => pcb_port,
  pcb_port_not_matched_error: () => pcb_port_not_matched_error,
  pcb_route_hint: () => pcb_route_hint,
  pcb_route_hints: () => pcb_route_hints,
  pcb_silkscreen_circle: () => pcb_silkscreen_circle,
  pcb_silkscreen_line: () => pcb_silkscreen_line,
  pcb_silkscreen_oval: () => pcb_silkscreen_oval,
  pcb_silkscreen_path: () => pcb_silkscreen_path,
  pcb_silkscreen_rect: () => pcb_silkscreen_rect,
  pcb_silkscreen_text: () => pcb_silkscreen_text,
  pcb_smtpad: () => pcb_smtpad,
  pcb_text: () => pcb_text,
  pcb_trace: () => pcb_trace,
  pcb_trace_error: () => pcb_trace_error,
  pcb_trace_hint: () => pcb_trace_hint,
  pcb_via: () => pcb_via,
  point: () => point,
  point3: () => point3,
  position: () => position,
  position3: () => position3,
  resistance: () => resistance,
  rotation: () => rotation,
  route_hint_point: () => route_hint_point,
  schematic_box: () => schematic_box,
  schematic_component: () => schematic_component,
  schematic_error: () => schematic_error,
  schematic_line: () => schematic_line,
  schematic_net_label: () => schematic_net_label,
  schematic_path: () => schematic_path,
  schematic_port: () => schematic_port,
  schematic_text: () => schematic_text,
  schematic_trace: () => schematic_trace,
  size: () => size,
  source_component_base: () => source_component_base,
  source_group: () => source_group,
  source_led: () => source_led,
  source_net: () => source_net,
  source_port: () => source_port,
  source_simple_bug: () => source_simple_bug,
  source_simple_capacitor: () => source_simple_capacitor,
  source_simple_diode: () => source_simple_diode,
  source_simple_ground: () => source_simple_ground,
  source_simple_power_source: () => source_simple_power_source,
  source_simple_resistor: () => source_simple_resistor,
  source_trace: () => source_trace,
  supplier_name: () => supplier_name,
  time: () => time,
  visible_layer: () => visible_layer,
  voltage: () => voltage
});
module.exports = __toCommonJS(src_exports);

// src/utils/convert-si-unit-to-number.ts
var import_convert_units = __toESM(require("convert-units"));
var si_prefix_multiplier = {
  tera: 1e13,
  T: 1e13,
  giga: 1e10,
  G: 1e10,
  mega: 1e7,
  M: 1e7,
  kilo: 1e4,
  k: 1e4,
  deci: 1,
  d: 1,
  centi: 0.1,
  c: 0.1,
  milli: 0.01,
  m: 0.01,
  micro: 1e-5,
  u: 1e-5,
  \u00B5: 1e-5,
  nano: 1e-8,
  n: 1e-8,
  pico: 1e-11,
  p: 1e-11
};
var si_prefixes = Object.keys(si_prefix_multiplier);
var target_conversion = {
  mass: "g",
  length: "mm",
  time: "ms",
  volume: "ml",
  angle: "deg"
};
function getSiPrefixMultiplierFromUnit(v) {
  for (const prefix of si_prefixes) {
    if (v.startsWith(prefix)) {
      return si_prefix_multiplier[prefix];
    }
  }
  return 1;
}
var parseAndConvertSiUnit = (v) => {
  if (typeof v === "undefined")
    return { unit: null, value: null };
  if (typeof v === "string" && v.match(/^[\d\.]+$/))
    return { value: parseFloat(v), unit: null };
  if (typeof v === "number")
    return { value: v, unit: null };
  if (typeof v === "object" && "x" in v && "y" in v) {
    return {
      unit: parseAndConvertSiUnit(v.x).unit,
      value: {
        x: parseAndConvertSiUnit(v.x).value,
        y: parseAndConvertSiUnit(v.y).value
      }
    };
  }
  const unit_reversed = v.split("").reverse().join("").match(/[a-zA-Z]+/)?.[0];
  if (!unit_reversed) {
    throw new Error(`Could not determine unit: "${v}"`);
  }
  const unit = unit_reversed.split("").reverse().join("");
  const value = v.slice(0, -unit.length);
  let measure;
  try {
    measure = (0, import_convert_units.default)().describe(unit)?.measure;
  } catch (e) {
  }
  if (measure) {
    const target_unit = target_conversion[measure];
    if (!target_unit) {
      throw new Error(
        `Could not determine target unit for measure: "${measure}"`
      );
    }
    return {
      unit,
      value: (0, import_convert_units.default)(parseFloat(value)).from(unit).to(target_unit)
    };
  } else {
    return {
      unit,
      value: getSiPrefixMultiplierFromUnit(unit) * parseFloat(value)
    };
  }
};

// src/units/index.ts
var import_zod = require("zod");
var resistance = import_zod.z.string().or(import_zod.z.number()).transform((v) => parseAndConvertSiUnit(v).value);
var capacitance = import_zod.z.string().or(import_zod.z.number()).transform((v) => parseAndConvertSiUnit(v).value);
var inductance = import_zod.z.string().or(import_zod.z.number()).transform((v) => parseAndConvertSiUnit(v).value);
var voltage = import_zod.z.string().or(import_zod.z.number()).transform((v) => parseAndConvertSiUnit(v).value);
var length = import_zod.z.string().or(import_zod.z.number()).transform((v) => parseAndConvertSiUnit(v).value);
var distance = length;
var current = import_zod.z.string().or(import_zod.z.number()).transform((v) => parseAndConvertSiUnit(v).value);
var time = import_zod.z.string().or(import_zod.z.number()).transform((v) => parseAndConvertSiUnit(v).value);
var rotation = import_zod.z.string().or(import_zod.z.number()).transform((v) => parseAndConvertSiUnit(v).value);

// src/common/point.ts
var import_zod2 = require("zod");
var point = import_zod2.z.object({
  x: distance,
  y: distance
});
var position = point;

// src/common/point3.ts
var import_zod3 = require("zod");
var point3 = import_zod3.z.object({
  x: distance,
  y: distance,
  z: distance
});
var position3 = point3;

// src/common/size.ts
var import_zod4 = require("zod");
var size = import_zod4.z.object({
  width: import_zod4.z.number(),
  height: import_zod4.z.number()
});

// src/source/source_simple_capacitor.ts
var import_zod7 = require("zod");

// src/pcb/properties/supplier_name.ts
var import_zod5 = require("zod");
var supplier_name = import_zod5.z.enum([
  "jlcpcb",
  "macrofab",
  "pcbway",
  "digikey",
  "mouser",
  "lcsc"
]);

// src/source/base/source_component_base.ts
var import_zod6 = require("zod");
var source_component_base = import_zod6.z.object({
  type: import_zod6.z.literal("source_component"),
  ftype: import_zod6.z.string().optional(),
  source_component_id: import_zod6.z.string(),
  name: import_zod6.z.string(),
  manufacturer_part_number: import_zod6.z.string().optional(),
  supplier_part_numbers: import_zod6.z.record(supplier_name, import_zod6.z.array(import_zod6.z.string())).optional()
});

// src/source/source_simple_capacitor.ts
var source_simple_capacitor = source_component_base.extend({
  ftype: import_zod7.z.literal("simple_capacitor"),
  capacitance
});

// src/source/source_simple_resistor.ts
var import_zod8 = require("zod");
var source_simple_resistor = source_component_base.extend({
  ftype: import_zod8.z.literal("simple_resistor"),
  resistance
});

// src/source/source_simple_diode.ts
var import_zod9 = require("zod");
var source_simple_diode = source_component_base.extend({
  ftype: import_zod9.z.literal("simple_diode")
});

// src/source/source_simple_ground.ts
var import_zod10 = require("zod");
var source_simple_ground = source_component_base.extend({
  ftype: import_zod10.z.literal("simple_ground")
});

// src/source/source_simple_bug.ts
var import_zod11 = require("zod");
var source_simple_bug = source_component_base.extend({
  ftype: import_zod11.z.literal("simple_bug")
});

// src/source/source_simple_inductor.ts
var import_zod12 = require("zod");
var source_simple_inductor = source_component_base.extend({
  ftype: import_zod12.z.literal("simple_inductor"),
  inductance
});

// src/source/source_led.ts
var import_zod13 = require("zod");
var source_led = source_simple_diode.extend({
  ftype: import_zod13.z.literal("led")
});

// src/source/source_simple_power_source.ts
var import_zod14 = require("zod");
var source_simple_power_source = source_component_base.extend({
  ftype: import_zod14.z.literal("simple_power_source"),
  voltage
});

// src/source/any_source_component.ts
var import_zod15 = require("zod");
var any_source_component = import_zod15.z.union([
  source_simple_resistor,
  source_simple_capacitor,
  source_simple_diode,
  source_simple_ground,
  source_simple_bug,
  source_led,
  source_simple_power_source
]);

// src/source/source_port.ts
var import_zod16 = require("zod");
var source_port = import_zod16.z.object({
  type: import_zod16.z.literal("source_port"),
  pin_number: import_zod16.z.number().optional(),
  port_hints: import_zod16.z.array(import_zod16.z.string()).optional(),
  name: import_zod16.z.string(),
  source_port_id: import_zod16.z.string(),
  source_component_id: import_zod16.z.string()
});

// src/source/source_trace.ts
var import_zod17 = require("zod");
var source_trace = import_zod17.z.object({
  type: import_zod17.z.literal("source_trace"),
  source_trace_id: import_zod17.z.string(),
  connected_source_port_ids: import_zod17.z.array(import_zod17.z.string()),
  connected_source_net_ids: import_zod17.z.array(import_zod17.z.string())
});

// src/source/source_group.ts
var import_zod18 = require("zod");
var source_group = import_zod18.z.object({
  type: import_zod18.z.literal("source_group"),
  source_group_id: import_zod18.z.string(),
  name: import_zod18.z.string().optional()
});

// src/source/source_net.ts
var import_zod19 = require("zod");
var source_net = import_zod19.z.object({
  type: import_zod19.z.literal("source_net"),
  source_net_id: import_zod19.z.string(),
  name: import_zod19.z.string(),
  member_source_group_ids: import_zod19.z.array(import_zod19.z.string()),
  is_power: import_zod19.z.boolean().optional(),
  is_ground: import_zod19.z.boolean().optional(),
  is_digital_signal: import_zod19.z.boolean().optional(),
  is_analog_signal: import_zod19.z.boolean().optional()
});

// src/schematic/schematic_box.ts
var import_zod20 = require("zod");
var schematic_box = import_zod20.z.object({
  type: import_zod20.z.literal("schematic_box"),
  schematic_component_id: import_zod20.z.string(),
  width: distance,
  height: distance,
  x: distance,
  y: distance
}).describe("Draws a box on the schematic");

// src/schematic/schematic_path.ts
var import_zod21 = require("zod");
var schematic_path = import_zod21.z.object({
  type: import_zod21.z.literal("schematic_path"),
  schematic_component_id: import_zod21.z.string(),
  fill_color: import_zod21.z.enum(["red", "blue"]).optional(),
  is_filled: import_zod21.z.boolean().optional(),
  points: import_zod21.z.array(point)
});

// src/schematic/schematic_component.ts
var import_zod22 = require("zod");
var schematic_component = import_zod22.z.object({
  type: import_zod22.z.literal("schematic_component"),
  rotation: rotation.default(0),
  size,
  center: point,
  source_component_id: import_zod22.z.string(),
  schematic_component_id: import_zod22.z.string(),
  pin_spacing: length.optional(),
  box_width: length.optional(),
  port_arrangement: import_zod22.z.union([
    import_zod22.z.object({
      left_size: import_zod22.z.number(),
      right_size: import_zod22.z.number(),
      top_size: import_zod22.z.number().optional(),
      bottom_size: import_zod22.z.number().optional()
    }),
    import_zod22.z.object({
      left_side: import_zod22.z.object({
        pins: import_zod22.z.array(import_zod22.z.number()),
        direction: import_zod22.z.enum(["top-to-bottom", "bottom-to-top"]).optional()
      }).optional(),
      right_side: import_zod22.z.object({
        pins: import_zod22.z.array(import_zod22.z.number()),
        direction: import_zod22.z.enum(["top-to-bottom", "bottom-to-top"]).optional()
      }).optional(),
      top_side: import_zod22.z.object({
        pins: import_zod22.z.array(import_zod22.z.number()),
        direction: import_zod22.z.enum(["left-to-right", "right-to-left"]).optional()
      }).optional(),
      bottom_side: import_zod22.z.object({
        pins: import_zod22.z.array(import_zod22.z.number()),
        direction: import_zod22.z.enum(["left-to-right", "right-to-left"]).optional()
      }).optional()
    })
  ]).optional(),
  port_labels: import_zod22.z.record(import_zod22.z.string()).optional()
});

// src/schematic/schematic_line.ts
var import_zod23 = require("zod");
var schematic_line = import_zod23.z.object({
  type: import_zod23.z.literal("schematic_line"),
  schematic_component_id: import_zod23.z.string(),
  x1: distance,
  x2: distance,
  y1: distance,
  y2: distance
});

// src/schematic/schematic_trace.ts
var import_zod24 = require("zod");
var schematic_trace = import_zod24.z.object({
  type: import_zod24.z.literal("schematic_trace"),
  schematic_trace_id: import_zod24.z.string(),
  source_trace_id: import_zod24.z.string(),
  edges: import_zod24.z.array(
    import_zod24.z.object({
      from: import_zod24.z.object({
        x: import_zod24.z.number(),
        y: import_zod24.z.number()
      }),
      to: import_zod24.z.object({
        x: import_zod24.z.number(),
        y: import_zod24.z.number()
      }),
      from_schematic_port_id: import_zod24.z.string().optional(),
      to_schematic_port_id: import_zod24.z.string().optional()
    })
  )
});

// src/schematic/schematic_text.ts
var import_zod25 = require("zod");
var schematic_text = import_zod25.z.object({
  type: import_zod25.z.literal("schematic_text"),
  schematic_component_id: import_zod25.z.string(),
  schematic_text_id: import_zod25.z.string(),
  text: import_zod25.z.string(),
  position: import_zod25.z.object({
    x: distance,
    y: distance
  }),
  rotation: import_zod25.z.number().default(0),
  anchor: import_zod25.z.enum(["center", "left", "right", "top", "bottom"]).default("center")
});

// src/schematic/schematic_port.ts
var import_zod26 = require("zod");
var schematic_port = import_zod26.z.object({
  type: import_zod26.z.literal("schematic_port"),
  schematic_port_id: import_zod26.z.string(),
  source_port_id: import_zod26.z.string(),
  schematic_component_id: import_zod26.z.string().optional(),
  center: point,
  facing_direction: import_zod26.z.enum(["up", "down", "left", "right"]).optional()
}).describe("Defines a port on a schematic component");

// src/schematic/schematic_net_label.ts
var import_zod27 = require("zod");
var schematic_net_label = import_zod27.z.object({
  type: import_zod27.z.literal("schematic_net_label"),
  source_net_id: import_zod27.z.string(),
  center: point,
  anchor_side: import_zod27.z.enum(["top", "bottom", "left", "right"]),
  text: import_zod27.z.string()
});

// src/schematic/schematic_error.ts
var import_zod28 = require("zod");
var schematic_error = import_zod28.z.object({
  schematic_error_id: import_zod28.z.string(),
  type: import_zod28.z.literal("schematic_error"),
  // eventually each error type should be broken out into a dir of files
  error_type: import_zod28.z.literal("schematic_port_not_found"),
  message: import_zod28.z.string()
}).describe("Defines a schematic error on the schematic");

// src/pcb/properties/layer_ref.ts
var import_zod29 = require("zod");
var all_layers = [
  "top",
  "bottom",
  "inner1",
  "inner2",
  "inner3",
  "inner4",
  "inner5",
  "inner6"
];
var layer_string = import_zod29.z.enum(all_layers);
var layer_ref = layer_string.or(
  import_zod29.z.object({
    name: layer_string
  })
).transform((layer) => {
  if (typeof layer === "string") {
    return layer;
  }
  return layer.name;
});
var visible_layer = import_zod29.z.enum(["top", "bottom"]);

// src/pcb/properties/pcb_route_hints.ts
var import_zod30 = require("zod");
var pcb_route_hint = import_zod30.z.object({
  x: distance,
  y: distance,
  via: import_zod30.z.boolean().optional(),
  via_to_layer: layer_ref.optional()
});
var pcb_route_hints = import_zod30.z.array(pcb_route_hint);

// src/pcb/properties/route_hint_point.ts
var import_zod31 = require("zod");
var route_hint_point = import_zod31.z.object({
  x: distance,
  y: distance,
  via: import_zod31.z.boolean().optional(),
  to_layer: layer_ref.optional()
});

// src/pcb/pcb_component.ts
var import_zod32 = require("zod");
var pcb_component = import_zod32.z.object({
  type: import_zod32.z.literal("pcb_component"),
  pcb_component_id: import_zod32.z.string(),
  source_component_id: import_zod32.z.string(),
  center: point,
  layer: layer_ref,
  rotation,
  width: length,
  height: length
}).describe("Defines a component on the PCB");

// src/pcb/pcb_hole.ts
var import_zod33 = require("zod");
var pcb_hole = import_zod33.z.object({
  type: import_zod33.z.literal("pcb_hole"),
  hole_shape: import_zod33.z.enum(["round", "square"]).default("round"),
  hole_diameter: import_zod33.z.number(),
  x: distance,
  y: distance
}).or(
  import_zod33.z.object({
    type: import_zod33.z.literal("pcb_hole"),
    hole_shape: import_zod33.z.literal("oval"),
    hole_width: import_zod33.z.number(),
    hole_height: import_zod33.z.number(),
    x: distance,
    y: distance
  })
).describe("Defines a hole on the PCB");

// src/pcb/pcb_plated_hole.ts
var import_zod34 = require("zod");
var pcb_plated_hole = import_zod34.z.object({
  type: import_zod34.z.literal("pcb_plated_hole"),
  shape: import_zod34.z.literal("circle"),
  outer_diameter: import_zod34.z.number(),
  hole_diameter: import_zod34.z.number(),
  x: distance,
  y: distance,
  layers: import_zod34.z.array(layer_ref),
  port_hints: import_zod34.z.array(import_zod34.z.string()).optional(),
  pcb_component_id: import_zod34.z.string().optional(),
  pcb_port_id: import_zod34.z.string().optional()
}).or(
  import_zod34.z.object({
    type: import_zod34.z.literal("pcb_plated_hole"),
    shape: import_zod34.z.enum(["oval", "pill"]),
    outer_width: import_zod34.z.number(),
    outer_height: import_zod34.z.number(),
    hole_width: import_zod34.z.number(),
    hole_height: import_zod34.z.number(),
    x: distance,
    y: distance,
    layers: import_zod34.z.array(layer_ref),
    port_hints: import_zod34.z.array(import_zod34.z.string()).optional(),
    pcb_component_id: import_zod34.z.string().optional(),
    pcb_port_id: import_zod34.z.string().optional()
  })
).describe("Defines a plated hole on the PCB");

// src/pcb/pcb_port.ts
var import_zod35 = require("zod");
var pcb_port = import_zod35.z.object({
  type: import_zod35.z.literal("pcb_port"),
  pcb_port_id: import_zod35.z.string(),
  source_port_id: import_zod35.z.string(),
  pcb_component_id: import_zod35.z.string(),
  x: distance,
  y: distance,
  layers: import_zod35.z.array(layer_ref)
}).describe("Defines a port on the PCB");

// src/pcb/pcb_smtpad.ts
var import_zod36 = require("zod");
var pcb_smtpad = import_zod36.z.union([
  import_zod36.z.object({
    pcb_smtpad_id: import_zod36.z.string(),
    type: import_zod36.z.literal("pcb_smtpad"),
    shape: import_zod36.z.literal("circle"),
    x: distance,
    y: distance,
    radius: import_zod36.z.number(),
    layer: layer_ref,
    port_hints: import_zod36.z.array(import_zod36.z.string()).optional(),
    pcb_component_id: import_zod36.z.string().optional(),
    pcb_port_id: import_zod36.z.string().optional()
  }),
  import_zod36.z.object({
    pcb_smtpad_id: import_zod36.z.string(),
    type: import_zod36.z.literal("pcb_smtpad"),
    shape: import_zod36.z.literal("rect"),
    x: distance,
    y: distance,
    width: import_zod36.z.number(),
    height: import_zod36.z.number(),
    layer: layer_ref,
    port_hints: import_zod36.z.array(import_zod36.z.string()).optional(),
    pcb_component_id: import_zod36.z.string().optional(),
    pcb_port_id: import_zod36.z.string().optional()
  })
]).describe("Defines an SMT pad on the PCB");

// src/pcb/pcb_text.ts
var import_zod37 = require("zod");
var pcb_text = import_zod37.z.object({
  type: import_zod37.z.literal("pcb_text"),
  text: import_zod37.z.string(),
  x: distance,
  y: distance,
  align: import_zod37.z.enum(["bottom-left"]),
  width: distance,
  height: distance,
  lines: import_zod37.z.number()
}).describe("Defines text on the PCB");

// src/pcb/pcb_trace.ts
var import_zod38 = require("zod");
var pcb_trace = import_zod38.z.object({
  type: import_zod38.z.literal("pcb_trace"),
  source_trace_id: import_zod38.z.string().optional(),
  pcb_component_id: import_zod38.z.string().optional(),
  pcb_trace_id: import_zod38.z.string(),
  route: import_zod38.z.array(
    import_zod38.z.union([
      import_zod38.z.object({
        route_type: import_zod38.z.literal("wire"),
        x: distance,
        y: distance,
        width: distance,
        start_pcb_port_id: import_zod38.z.string().optional(),
        end_pcb_port_id: import_zod38.z.string().optional(),
        layer: import_zod38.z.string()
      }),
      import_zod38.z.object({
        route_type: import_zod38.z.literal("via"),
        x: distance,
        y: distance,
        from_layer: import_zod38.z.string(),
        to_layer: import_zod38.z.string()
      })
    ])
  )
});

// src/pcb/pcb_trace_error.ts
var import_zod39 = require("zod");
var pcb_trace_error = import_zod39.z.object({
  pcb_error_id: import_zod39.z.string(),
  type: import_zod39.z.literal("pcb_error"),
  error_type: import_zod39.z.literal("pcb_trace_error"),
  message: import_zod39.z.string(),
  pcb_trace_id: import_zod39.z.string(),
  source_trace_id: import_zod39.z.string(),
  pcb_component_ids: import_zod39.z.array(import_zod39.z.string()),
  pcb_port_ids: import_zod39.z.array(import_zod39.z.string())
}).describe("Defines a trace error on the PCB");

// src/pcb/pcb_port_not_matched_error.ts
var import_zod40 = require("zod");
var pcb_port_not_matched_error = import_zod40.z.object({
  pcb_error_id: import_zod40.z.string(),
  type: import_zod40.z.literal("pcb_error"),
  error_type: import_zod40.z.literal("pcb_port_not_matched_error"),
  message: import_zod40.z.string(),
  pcb_component_ids: import_zod40.z.array(import_zod40.z.string())
}).describe("Defines a trace error on the PCB");

// src/pcb/pcb_via.ts
var import_zod41 = require("zod");
var pcb_via = import_zod41.z.object({
  type: import_zod41.z.literal("pcb_via"),
  x: distance,
  y: distance,
  outer_diameter: distance.default("0.6mm"),
  hole_diameter: distance.default("0.25mm"),
  /** @deprecated */
  from_layer: layer_ref.optional(),
  /** @deprecated */
  to_layer: layer_ref.optional(),
  layers: import_zod41.z.array(layer_ref)
}).describe("Defines a via on the PCB");

// src/pcb/pcb_board.ts
var import_zod42 = require("zod");
var pcb_board = import_zod42.z.object({
  type: import_zod42.z.literal("pcb_board"),
  width: length,
  height: length,
  center: point
}).describe("Defines the board outline of the PCB");

// src/pcb/pcb_placement_error.ts
var import_zod43 = require("zod");
var pcb_placement_error = import_zod43.z.object({
  pcb_error_id: import_zod43.z.string(),
  type: import_zod43.z.literal("pcb_error"),
  error_type: import_zod43.z.literal("pcb_placement_error"),
  message: import_zod43.z.string()
}).describe("Defines a placement error on the PCB");

// src/pcb/pcb_trace_hint.ts
var import_zod44 = require("zod");
var pcb_trace_hint = import_zod44.z.object({
  pcb_trace_hint_id: import_zod44.z.string(),
  type: import_zod44.z.literal("pcb_trace_hint"),
  pcb_port_id: import_zod44.z.string(),
  pcb_component_id: import_zod44.z.string(),
  route: import_zod44.z.array(route_hint_point)
}).describe("A hint that can be used to generate a PCB trace");

// src/pcb/pcb_silkscreen_line.ts
var import_zod45 = require("zod");
var pcb_silkscreen_line = import_zod45.z.object({
  type: import_zod45.z.literal("pcb_silkscreen_line"),
  pcb_silkscreen_line_id: import_zod45.z.string(),
  pcb_component_id: import_zod45.z.string(),
  stroke_width: distance.default("0.1mm"),
  x1: distance,
  y1: distance,
  x2: distance,
  y2: distance,
  layer: visible_layer
}).describe("Defines a silkscreen line on the PCB");

// src/pcb/pcb_silkscreen_path.ts
var import_zod46 = require("zod");
var pcb_silkscreen_path = import_zod46.z.object({
  type: import_zod46.z.literal("pcb_silkscreen_path"),
  pcb_silkscreen_path_id: import_zod46.z.string(),
  pcb_component_id: import_zod46.z.string(),
  layer: visible_layer,
  route: import_zod46.z.array(point),
  stroke_width: length
}).describe("Defines a silkscreen path on the PCB");

// src/pcb/pcb_silkscreen_text.ts
var import_zod47 = require("zod");
var pcb_silkscreen_text = import_zod47.z.object({
  type: import_zod47.z.literal("pcb_silkscreen_text"),
  font: import_zod47.z.literal("tscircuit2024").default("tscircuit2024"),
  font_size: distance.default("0.2mm"),
  pcb_component_id: import_zod47.z.string(),
  text: import_zod47.z.string(),
  layer: visible_layer,
  anchor_position: point.default({ x: 0, y: 0 }),
  anchor_alignment: import_zod47.z.enum(["center", "top_left", "top_right", "bottom_left", "bottom_right"]).default("center")
}).describe("Defines silkscreen text on the PCB");

// src/pcb/pcb_silkscreen_rect.ts
var import_zod48 = require("zod");
var pcb_silkscreen_rect = import_zod48.z.object({
  type: import_zod48.z.literal("pcb_silkscreen_rect"),
  pcb_silkscreen_rect_id: import_zod48.z.string(),
  pcb_component_id: import_zod48.z.string(),
  center: point,
  width: distance,
  height: distance,
  layer: visible_layer
}).describe("Defines a silkscreen rect on the PCB");

// src/pcb/pcb_silkscreen_circle.ts
var import_zod49 = require("zod");
var pcb_silkscreen_circle = import_zod49.z.object({
  type: import_zod49.z.literal("pcb_silkscreen_circle"),
  pcb_silkscreen_circle_id: import_zod49.z.string(),
  pcb_component_id: import_zod49.z.string(),
  center: point,
  radius: distance,
  layer: visible_layer
}).describe("Defines a silkscreen circle on the PCB");

// src/pcb/pcb_silkscreen_oval.ts
var import_zod50 = require("zod");
var pcb_silkscreen_oval = import_zod50.z.object({
  type: import_zod50.z.literal("pcb_silkscreen_oval"),
  pcb_silkscreen_oval_id: import_zod50.z.string(),
  pcb_component_id: import_zod50.z.string(),
  center: point,
  radius_x: distance,
  radius_y: distance,
  layer: visible_layer
}).describe("Defines a silkscreen oval on the PCB");

// src/pcb/pcb_fabrication_note_text.ts
var import_zod51 = require("zod");
var pcb_fabrication_note_text = import_zod51.z.object({
  type: import_zod51.z.literal("pcb_fabrication_note_text"),
  font: import_zod51.z.literal("tscircuit2024").default("tscircuit2024"),
  font_size: distance.default("1mm"),
  pcb_component_id: import_zod51.z.string(),
  text: import_zod51.z.string(),
  layer: visible_layer,
  anchor_position: point.default({ x: 0, y: 0 }),
  anchor_alignment: import_zod51.z.enum(["center", "top_left", "top_right", "bottom_left", "bottom_right"]).default("center")
}).describe(
  "Defines a fabrication note in text on the PCB, useful for leaving notes for assemblers or fabricators"
);

// src/pcb/pcb_fabrication_note_path.ts
var import_zod52 = require("zod");
var pcb_fabrication_note_path = import_zod52.z.object({
  type: import_zod52.z.literal("pcb_fabrication_note_path"),
  fabrication_note_path_id: import_zod52.z.string(),
  pcb_component_id: import_zod52.z.string(),
  layer: visible_layer,
  route: import_zod52.z.array(point),
  stroke_width: length
}).describe(
  "Defines a fabrication path on the PCB for fabricators or assemblers"
);

// src/cad/cad_component.ts
var import_zod53 = require("zod");
var cad_component = import_zod53.z.object({
  type: import_zod53.z.literal("cad_component"),
  cad_component_id: import_zod53.z.string(),
  pcb_component_id: import_zod53.z.string(),
  source_component_id: import_zod53.z.string(),
  position: point3,
  rotation: point3.optional(),
  size: point3.optional(),
  layer: layer_ref.optional(),
  // These are all ways to generate/load the 3d model
  footprinter_string: import_zod53.z.string().optional(),
  model_obj_url: import_zod53.z.string().optional(),
  model_stl_url: import_zod53.z.string().optional(),
  model_3mf_url: import_zod53.z.string().optional(),
  model_jscad: import_zod53.z.array(import_zod53.z.any()).optional()
}).describe("Defines a component on the PCB");

// src/any_soup_element.ts
var import_zod54 = require("zod");
var any_soup_element = import_zod54.z.union([
  source_trace,
  source_port,
  any_source_component,
  source_led,
  source_net,
  source_group,
  source_simple_bug,
  source_simple_capacitor,
  source_simple_diode,
  source_simple_resistor,
  source_simple_power_source,
  pcb_component,
  pcb_hole,
  pcb_plated_hole,
  pcb_port,
  pcb_text,
  pcb_trace,
  pcb_via,
  pcb_smtpad,
  pcb_board,
  pcb_trace_hint,
  pcb_silkscreen_line,
  pcb_silkscreen_path,
  pcb_silkscreen_text,
  pcb_silkscreen_rect,
  pcb_silkscreen_circle,
  pcb_silkscreen_oval,
  pcb_trace_error,
  pcb_placement_error,
  pcb_port_not_matched_error,
  pcb_fabrication_note_path,
  pcb_fabrication_note_text,
  schematic_box,
  schematic_text,
  schematic_line,
  schematic_component,
  schematic_port,
  schematic_trace,
  schematic_path,
  schematic_error,
  schematic_net_label,
  cad_component
]);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  all_layers,
  any_soup_element,
  any_source_component,
  cad_component,
  capacitance,
  current,
  distance,
  inductance,
  layer_ref,
  layer_string,
  length,
  pcb_board,
  pcb_component,
  pcb_fabrication_note_path,
  pcb_fabrication_note_text,
  pcb_hole,
  pcb_placement_error,
  pcb_plated_hole,
  pcb_port,
  pcb_port_not_matched_error,
  pcb_route_hint,
  pcb_route_hints,
  pcb_silkscreen_circle,
  pcb_silkscreen_line,
  pcb_silkscreen_oval,
  pcb_silkscreen_path,
  pcb_silkscreen_rect,
  pcb_silkscreen_text,
  pcb_smtpad,
  pcb_text,
  pcb_trace,
  pcb_trace_error,
  pcb_trace_hint,
  pcb_via,
  point,
  point3,
  position,
  position3,
  resistance,
  rotation,
  route_hint_point,
  schematic_box,
  schematic_component,
  schematic_error,
  schematic_line,
  schematic_net_label,
  schematic_path,
  schematic_port,
  schematic_text,
  schematic_trace,
  size,
  source_component_base,
  source_group,
  source_led,
  source_net,
  source_port,
  source_simple_bug,
  source_simple_capacitor,
  source_simple_diode,
  source_simple_ground,
  source_simple_power_source,
  source_simple_resistor,
  source_trace,
  supplier_name,
  time,
  visible_layer,
  voltage
});
//# sourceMappingURL=index.js.map