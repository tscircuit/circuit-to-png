import { z } from 'zod';

declare const resistance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
declare const capacitance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
declare const inductance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
declare const voltage: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
declare const length: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
declare const distance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
declare const current: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
declare const time: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
declare const rotation: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;

declare const point: z.ZodObject<{
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
}, {
    x: string | number;
    y: string | number;
}>;
declare const position: z.ZodObject<{
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
}, {
    x: string | number;
    y: string | number;
}>;
type Point = z.infer<typeof point>;
type InputPoint = z.input<typeof point>;
type InputPosition = z.input<typeof position>;
type Position = z.infer<typeof position>;

declare const point3: z.ZodObject<{
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    z: number;
}, {
    x: string | number;
    y: string | number;
    z: string | number;
}>;
declare const position3: z.ZodObject<{
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    z: number;
}, {
    x: string | number;
    y: string | number;
    z: string | number;
}>;
type Point3 = z.infer<typeof point3>;

declare const size: z.ZodObject<{
    width: z.ZodNumber;
    height: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    width: number;
    height: number;
}, {
    width: number;
    height: number;
}>;
type Size = z.infer<typeof size>;

declare const source_simple_capacitor: z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"source_component">;
    ftype: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, {
    ftype: z.ZodLiteral<"simple_capacitor">;
    capacitance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}>, "strip", z.ZodTypeAny, {
    type: "source_component";
    ftype: "simple_capacitor";
    source_component_id: string;
    name: string;
    capacitance: number;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    type: "source_component";
    ftype: "simple_capacitor";
    source_component_id: string;
    name: string;
    capacitance: string | number;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>;
type SourceSimpleCapacitor = z.infer<typeof source_simple_capacitor>;
type SourceSimpleCapacitorInput = z.input<typeof source_simple_capacitor>;

declare const source_simple_resistor: z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"source_component">;
    ftype: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, {
    ftype: z.ZodLiteral<"simple_resistor">;
    resistance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}>, "strip", z.ZodTypeAny, {
    type: "source_component";
    ftype: "simple_resistor";
    source_component_id: string;
    name: string;
    resistance: number;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    type: "source_component";
    ftype: "simple_resistor";
    source_component_id: string;
    name: string;
    resistance: string | number;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>;
type SourceSimpleResistor = z.infer<typeof source_simple_resistor>;
type SourceSimpleResistorInput = z.input<typeof source_simple_resistor>;

declare const source_simple_diode: z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"source_component">;
    ftype: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, {
    ftype: z.ZodLiteral<"simple_diode">;
}>, "strip", z.ZodTypeAny, {
    type: "source_component";
    ftype: "simple_diode";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    type: "source_component";
    ftype: "simple_diode";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>;
type SourceSimpleDiode = z.infer<typeof source_simple_diode>;
type SourceSimpleDiodeInput = z.input<typeof source_simple_diode>;

declare const source_simple_ground: z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"source_component">;
    ftype: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, {
    ftype: z.ZodLiteral<"simple_ground">;
}>, "strip", z.ZodTypeAny, {
    type: "source_component";
    ftype: "simple_ground";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    type: "source_component";
    ftype: "simple_ground";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>;
type SourceSimpleGround = z.infer<typeof source_simple_ground>;
type SourceSimpleGroundInput = z.input<typeof source_simple_ground>;

declare const source_simple_bug: z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"source_component">;
    ftype: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, {
    ftype: z.ZodLiteral<"simple_bug">;
}>, "strip", z.ZodTypeAny, {
    type: "source_component";
    ftype: "simple_bug";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    type: "source_component";
    ftype: "simple_bug";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>;
type SourceSimpleBug = z.infer<typeof source_simple_bug>;
type SourceSimpleBugInput = z.input<typeof source_simple_bug>;

declare const source_simple_inductor: z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"source_component">;
    ftype: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, {
    ftype: z.ZodLiteral<"simple_inductor">;
    inductance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}>, "strip", z.ZodTypeAny, {
    type: "source_component";
    ftype: "simple_inductor";
    source_component_id: string;
    name: string;
    inductance: number;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    type: "source_component";
    ftype: "simple_inductor";
    source_component_id: string;
    name: string;
    inductance: string | number;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>;
type SourceSimpleInductor = z.infer<typeof source_simple_inductor>;
type SourceSimpleInductorInput = z.input<typeof source_simple_inductor>;

declare const source_led: z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"source_component">;
    ftype: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, {
    ftype: z.ZodLiteral<"simple_diode">;
}>, {
    ftype: z.ZodLiteral<"led">;
}>, "strip", z.ZodTypeAny, {
    type: "source_component";
    ftype: "led";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    type: "source_component";
    ftype: "led";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>;
type SourceLed = z.infer<typeof source_led>;
type SourceLedInput = z.input<typeof source_led>;

declare const source_simple_power_source: z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"source_component">;
    ftype: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, {
    ftype: z.ZodLiteral<"simple_power_source">;
    voltage: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}>, "strip", z.ZodTypeAny, {
    voltage: number;
    type: "source_component";
    ftype: "simple_power_source";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    voltage: string | number;
    type: "source_component";
    ftype: "simple_power_source";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>;
type SourceSimplePowerSource = z.infer<typeof source_simple_power_source>;
type SourceSimplePowerSourceInput = z.input<typeof source_simple_power_source>;

declare const any_source_component: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"source_component">;
    ftype: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, {
    ftype: z.ZodLiteral<"simple_resistor">;
    resistance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}>, "strip", z.ZodTypeAny, {
    type: "source_component";
    ftype: "simple_resistor";
    source_component_id: string;
    name: string;
    resistance: number;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    type: "source_component";
    ftype: "simple_resistor";
    source_component_id: string;
    name: string;
    resistance: string | number;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"source_component">;
    ftype: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, {
    ftype: z.ZodLiteral<"simple_capacitor">;
    capacitance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}>, "strip", z.ZodTypeAny, {
    type: "source_component";
    ftype: "simple_capacitor";
    source_component_id: string;
    name: string;
    capacitance: number;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    type: "source_component";
    ftype: "simple_capacitor";
    source_component_id: string;
    name: string;
    capacitance: string | number;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"source_component">;
    ftype: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, {
    ftype: z.ZodLiteral<"simple_diode">;
}>, "strip", z.ZodTypeAny, {
    type: "source_component";
    ftype: "simple_diode";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    type: "source_component";
    ftype: "simple_diode";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"source_component">;
    ftype: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, {
    ftype: z.ZodLiteral<"simple_ground">;
}>, "strip", z.ZodTypeAny, {
    type: "source_component";
    ftype: "simple_ground";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    type: "source_component";
    ftype: "simple_ground";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"source_component">;
    ftype: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, {
    ftype: z.ZodLiteral<"simple_bug">;
}>, "strip", z.ZodTypeAny, {
    type: "source_component";
    ftype: "simple_bug";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    type: "source_component";
    ftype: "simple_bug";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"source_component">;
    ftype: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, {
    ftype: z.ZodLiteral<"simple_diode">;
}>, {
    ftype: z.ZodLiteral<"led">;
}>, "strip", z.ZodTypeAny, {
    type: "source_component";
    ftype: "led";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    type: "source_component";
    ftype: "led";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"source_component">;
    ftype: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, {
    ftype: z.ZodLiteral<"simple_power_source">;
    voltage: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}>, "strip", z.ZodTypeAny, {
    voltage: number;
    type: "source_component";
    ftype: "simple_power_source";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    voltage: string | number;
    type: "source_component";
    ftype: "simple_power_source";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>]>;
type AnySourceComponent = z.infer<typeof any_source_component>;

declare const source_port: z.ZodObject<{
    type: z.ZodLiteral<"source_port">;
    pin_number: z.ZodOptional<z.ZodNumber>;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    name: z.ZodString;
    source_port_id: z.ZodString;
    source_component_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "source_port";
    source_component_id: string;
    name: string;
    source_port_id: string;
    pin_number?: number | undefined;
    port_hints?: string[] | undefined;
}, {
    type: "source_port";
    source_component_id: string;
    name: string;
    source_port_id: string;
    pin_number?: number | undefined;
    port_hints?: string[] | undefined;
}>;
type SourcePort = z.infer<typeof source_port>;

declare const source_trace: z.ZodObject<{
    type: z.ZodLiteral<"source_trace">;
    source_trace_id: z.ZodString;
    connected_source_port_ids: z.ZodArray<z.ZodString, "many">;
    connected_source_net_ids: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    type: "source_trace";
    source_trace_id: string;
    connected_source_port_ids: string[];
    connected_source_net_ids: string[];
}, {
    type: "source_trace";
    source_trace_id: string;
    connected_source_port_ids: string[];
    connected_source_net_ids: string[];
}>;
type SourceTrace = z.infer<typeof source_trace>;

declare const source_component_base: z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    ftype: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    source_component_id: string;
    name: string;
    ftype?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    type: "source_component";
    source_component_id: string;
    name: string;
    ftype?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>;
type SourceComponentBase = z.infer<typeof source_component_base>;

declare const source_group: z.ZodObject<{
    type: z.ZodLiteral<"source_group">;
    source_group_id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_group";
    source_group_id: string;
    name?: string | undefined;
}, {
    type: "source_group";
    source_group_id: string;
    name?: string | undefined;
}>;
type SourceGroup = z.infer<typeof source_group>;
type SourceGroupInput = z.input<typeof source_group>;

declare const source_net: z.ZodObject<{
    type: z.ZodLiteral<"source_net">;
    source_net_id: z.ZodString;
    name: z.ZodString;
    member_source_group_ids: z.ZodArray<z.ZodString, "many">;
    is_power: z.ZodOptional<z.ZodBoolean>;
    is_ground: z.ZodOptional<z.ZodBoolean>;
    is_digital_signal: z.ZodOptional<z.ZodBoolean>;
    is_analog_signal: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    type: "source_net";
    name: string;
    source_net_id: string;
    member_source_group_ids: string[];
    is_power?: boolean | undefined;
    is_ground?: boolean | undefined;
    is_digital_signal?: boolean | undefined;
    is_analog_signal?: boolean | undefined;
}, {
    type: "source_net";
    name: string;
    source_net_id: string;
    member_source_group_ids: string[];
    is_power?: boolean | undefined;
    is_ground?: boolean | undefined;
    is_digital_signal?: boolean | undefined;
    is_analog_signal?: boolean | undefined;
}>;
type SourceNet = z.infer<typeof source_net>;
type SourceNetInput = z.input<typeof source_net>;

declare const schematic_box: z.ZodObject<{
    type: z.ZodLiteral<"schematic_box">;
    schematic_component_id: z.ZodString;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "schematic_box";
    width: number;
    height: number;
    schematic_component_id: string;
}, {
    x: string | number;
    y: string | number;
    type: "schematic_box";
    width: string | number;
    height: string | number;
    schematic_component_id: string;
}>;
type SchematicBoxInput = z.input<typeof schematic_box>;
type SchematicBox = z.infer<typeof schematic_box>;

declare const schematic_path: z.ZodObject<{
    type: z.ZodLiteral<"schematic_path">;
    schematic_component_id: z.ZodString;
    fill_color: z.ZodOptional<z.ZodEnum<["red", "blue"]>>;
    is_filled: z.ZodOptional<z.ZodBoolean>;
    points: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "schematic_path";
    schematic_component_id: string;
    points: {
        x: number;
        y: number;
    }[];
    fill_color?: "red" | "blue" | undefined;
    is_filled?: boolean | undefined;
}, {
    type: "schematic_path";
    schematic_component_id: string;
    points: {
        x: string | number;
        y: string | number;
    }[];
    fill_color?: "red" | "blue" | undefined;
    is_filled?: boolean | undefined;
}>;
type SchematicPathInput = z.input<typeof schematic_path>;
type SchematicPath = z.infer<typeof schematic_path>;

declare const schematic_component: z.ZodObject<{
    type: z.ZodLiteral<"schematic_component">;
    rotation: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    size: z.ZodObject<{
        width: z.ZodNumber;
        height: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        width: number;
        height: number;
    }, {
        width: number;
        height: number;
    }>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    source_component_id: z.ZodString;
    schematic_component_id: z.ZodString;
    pin_spacing: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    box_width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    port_arrangement: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        left_size: z.ZodNumber;
        right_size: z.ZodNumber;
        top_size: z.ZodOptional<z.ZodNumber>;
        bottom_size: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        left_size: number;
        right_size: number;
        top_size?: number | undefined;
        bottom_size?: number | undefined;
    }, {
        left_size: number;
        right_size: number;
        top_size?: number | undefined;
        bottom_size?: number | undefined;
    }>, z.ZodObject<{
        left_side: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodNumber, "many">;
            direction: z.ZodOptional<z.ZodEnum<["top-to-bottom", "bottom-to-top"]>>;
        }, "strip", z.ZodTypeAny, {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        }, {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        }>>;
        right_side: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodNumber, "many">;
            direction: z.ZodOptional<z.ZodEnum<["top-to-bottom", "bottom-to-top"]>>;
        }, "strip", z.ZodTypeAny, {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        }, {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        }>>;
        top_side: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodNumber, "many">;
            direction: z.ZodOptional<z.ZodEnum<["left-to-right", "right-to-left"]>>;
        }, "strip", z.ZodTypeAny, {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        }, {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        }>>;
        bottom_side: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodNumber, "many">;
            direction: z.ZodOptional<z.ZodEnum<["left-to-right", "right-to-left"]>>;
        }, "strip", z.ZodTypeAny, {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        }, {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        left_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        right_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        top_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
        bottom_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
    }, {
        left_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        right_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        top_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
        bottom_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
    }>]>>;
    port_labels: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_component";
    source_component_id: string;
    schematic_component_id: string;
    rotation: number;
    size: {
        width: number;
        height: number;
    };
    center: {
        x: number;
        y: number;
    };
    pin_spacing?: number | undefined;
    box_width?: number | undefined;
    port_arrangement?: {
        left_size: number;
        right_size: number;
        top_size?: number | undefined;
        bottom_size?: number | undefined;
    } | {
        left_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        right_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        top_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
        bottom_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
    } | undefined;
    port_labels?: Record<string, string> | undefined;
}, {
    type: "schematic_component";
    source_component_id: string;
    schematic_component_id: string;
    size: {
        width: number;
        height: number;
    };
    center: {
        x: string | number;
        y: string | number;
    };
    rotation?: string | number | undefined;
    pin_spacing?: string | number | undefined;
    box_width?: string | number | undefined;
    port_arrangement?: {
        left_size: number;
        right_size: number;
        top_size?: number | undefined;
        bottom_size?: number | undefined;
    } | {
        left_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        right_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        top_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
        bottom_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
    } | undefined;
    port_labels?: Record<string, string> | undefined;
}>;
type SchematicComponentInput = z.input<typeof schematic_component>;
type SchematicComponent = z.infer<typeof schematic_component>;

declare const schematic_line: z.ZodObject<{
    type: z.ZodLiteral<"schematic_line">;
    schematic_component_id: z.ZodString;
    x1: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    x2: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y1: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y2: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_line";
    schematic_component_id: string;
    x1: number;
    x2: number;
    y1: number;
    y2: number;
}, {
    type: "schematic_line";
    schematic_component_id: string;
    x1: string | number;
    x2: string | number;
    y1: string | number;
    y2: string | number;
}>;
type SchematicLineInput = z.input<typeof schematic_line>;
type SchematicLine = z.infer<typeof schematic_line>;

declare const schematic_trace: z.ZodObject<{
    type: z.ZodLiteral<"schematic_trace">;
    schematic_trace_id: z.ZodString;
    source_trace_id: z.ZodString;
    edges: z.ZodArray<z.ZodObject<{
        from: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: number;
            y: number;
        }>;
        to: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: number;
            y: number;
        }>;
        from_schematic_port_id: z.ZodOptional<z.ZodString>;
        to_schematic_port_id: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        from: {
            x: number;
            y: number;
        };
        to: {
            x: number;
            y: number;
        };
        from_schematic_port_id?: string | undefined;
        to_schematic_port_id?: string | undefined;
    }, {
        from: {
            x: number;
            y: number;
        };
        to: {
            x: number;
            y: number;
        };
        from_schematic_port_id?: string | undefined;
        to_schematic_port_id?: string | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "schematic_trace";
    source_trace_id: string;
    schematic_trace_id: string;
    edges: {
        from: {
            x: number;
            y: number;
        };
        to: {
            x: number;
            y: number;
        };
        from_schematic_port_id?: string | undefined;
        to_schematic_port_id?: string | undefined;
    }[];
}, {
    type: "schematic_trace";
    source_trace_id: string;
    schematic_trace_id: string;
    edges: {
        from: {
            x: number;
            y: number;
        };
        to: {
            x: number;
            y: number;
        };
        from_schematic_port_id?: string | undefined;
        to_schematic_port_id?: string | undefined;
    }[];
}>;
type SchematicTraceInput = z.input<typeof schematic_trace>;
type SchematicTrace = z.infer<typeof schematic_trace>;

declare const schematic_text: z.ZodObject<{
    type: z.ZodLiteral<"schematic_text">;
    schematic_component_id: z.ZodString;
    schematic_text_id: z.ZodString;
    text: z.ZodString;
    position: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    rotation: z.ZodDefault<z.ZodNumber>;
    anchor: z.ZodDefault<z.ZodEnum<["center", "left", "right", "top", "bottom"]>>;
}, "strip", z.ZodTypeAny, {
    anchor: "center" | "left" | "right" | "top" | "bottom";
    type: "schematic_text";
    schematic_component_id: string;
    rotation: number;
    schematic_text_id: string;
    text: string;
    position: {
        x: number;
        y: number;
    };
}, {
    type: "schematic_text";
    schematic_component_id: string;
    schematic_text_id: string;
    text: string;
    position: {
        x: string | number;
        y: string | number;
    };
    anchor?: "center" | "left" | "right" | "top" | "bottom" | undefined;
    rotation?: number | undefined;
}>;
type SchematicTextInput = z.input<typeof schematic_text>;
type SchematicText = z.infer<typeof schematic_text>;

declare const schematic_port: z.ZodObject<{
    type: z.ZodLiteral<"schematic_port">;
    schematic_port_id: z.ZodString;
    source_port_id: z.ZodString;
    schematic_component_id: z.ZodOptional<z.ZodString>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    facing_direction: z.ZodOptional<z.ZodEnum<["up", "down", "left", "right"]>>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_port";
    source_port_id: string;
    center: {
        x: number;
        y: number;
    };
    schematic_port_id: string;
    schematic_component_id?: string | undefined;
    facing_direction?: "left" | "right" | "up" | "down" | undefined;
}, {
    type: "schematic_port";
    source_port_id: string;
    center: {
        x: string | number;
        y: string | number;
    };
    schematic_port_id: string;
    schematic_component_id?: string | undefined;
    facing_direction?: "left" | "right" | "up" | "down" | undefined;
}>;
type SchematicPortInput = z.input<typeof schematic_port>;
type SchematicPort = z.infer<typeof schematic_port>;

declare const schematic_net_label: z.ZodObject<{
    type: z.ZodLiteral<"schematic_net_label">;
    source_net_id: z.ZodString;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    anchor_side: z.ZodEnum<["top", "bottom", "left", "right"]>;
    text: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "schematic_net_label";
    source_net_id: string;
    center: {
        x: number;
        y: number;
    };
    text: string;
    anchor_side: "left" | "right" | "top" | "bottom";
}, {
    type: "schematic_net_label";
    source_net_id: string;
    center: {
        x: string | number;
        y: string | number;
    };
    text: string;
    anchor_side: "left" | "right" | "top" | "bottom";
}>;
type SchematicNetLabelInput = z.input<typeof schematic_net_label>;
type SchematicNetLabel = z.infer<typeof schematic_net_label>;

declare const schematic_error: z.ZodObject<{
    schematic_error_id: z.ZodString;
    type: z.ZodLiteral<"schematic_error">;
    error_type: z.ZodLiteral<"schematic_port_not_found">;
    message: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "schematic_error";
    schematic_error_id: string;
    error_type: "schematic_port_not_found";
}, {
    message: string;
    type: "schematic_error";
    schematic_error_id: string;
    error_type: "schematic_port_not_found";
}>;
type SchematicErrorInput = z.input<typeof schematic_error>;
type SchematicError = z.infer<typeof schematic_error>;

declare const all_layers: readonly ["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"];
declare const layer_string: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
declare const layer_ref: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
    name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
}, "strip", z.ZodTypeAny, {
    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
}, {
    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
}>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
}>;
type LayerRefInput = z.input<typeof layer_ref>;
type LayerRef = z.output<typeof layer_ref>;
declare const visible_layer: z.ZodEnum<["top", "bottom"]>;
type VisibleLayerRef = z.infer<typeof visible_layer>;

declare const pcb_route_hint: z.ZodObject<{
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    via: z.ZodOptional<z.ZodBoolean>;
    via_to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    via?: boolean | undefined;
    via_to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
}, {
    x: string | number;
    y: string | number;
    via?: boolean | undefined;
    via_to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
}>;
declare const pcb_route_hints: z.ZodArray<z.ZodObject<{
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    via: z.ZodOptional<z.ZodBoolean>;
    via_to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    via?: boolean | undefined;
    via_to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
}, {
    x: string | number;
    y: string | number;
    via?: boolean | undefined;
    via_to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
}>, "many">;
type PcbRouteHintInput = z.input<typeof pcb_route_hint>;
type PcbRouteHintsInput = z.input<typeof pcb_route_hints>;
type PcbRouteHint = z.output<typeof pcb_route_hint>;
type PcbRouteHints = z.output<typeof pcb_route_hints>;

declare const supplier_name: z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>;
type SupplierName = z.infer<typeof supplier_name>;

declare const route_hint_point: z.ZodObject<{
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    via: z.ZodOptional<z.ZodBoolean>;
    to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    via?: boolean | undefined;
    to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
}, {
    x: string | number;
    y: string | number;
    via?: boolean | undefined;
    to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
}>;
type RouteHintPoint = z.infer<typeof route_hint_point>;
type RouteHintPointInput = z.input<typeof route_hint_point>;

declare const pcb_component: z.ZodObject<{
    type: z.ZodLiteral<"pcb_component">;
    pcb_component_id: z.ZodString;
    source_component_id: z.ZodString;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    rotation: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_component";
    width: number;
    height: number;
    source_component_id: string;
    rotation: number;
    center: {
        x: number;
        y: number;
    };
    pcb_component_id: string;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
}, {
    type: "pcb_component";
    width: string | number;
    height: string | number;
    source_component_id: string;
    rotation: string | number;
    center: {
        x: string | number;
        y: string | number;
    };
    pcb_component_id: string;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
}>;
type PCBComponentInput = z.input<typeof pcb_component>;
type PCBComponent = z.infer<typeof pcb_component>;

declare const pcb_hole: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"pcb_hole">;
    hole_shape: z.ZodDefault<z.ZodEnum<["round", "square"]>>;
    hole_diameter: z.ZodNumber;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_hole";
    hole_shape: "round" | "square";
    hole_diameter: number;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_hole";
    hole_diameter: number;
    hole_shape?: "round" | "square" | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_hole">;
    hole_shape: z.ZodLiteral<"oval">;
    hole_width: z.ZodNumber;
    hole_height: z.ZodNumber;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_hole";
    hole_shape: "oval";
    hole_width: number;
    hole_height: number;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_hole";
    hole_shape: "oval";
    hole_width: number;
    hole_height: number;
}>]>;
type PCBHoleInput = z.input<typeof pcb_hole>;
type PCBHole = z.infer<typeof pcb_hole>;

declare const pcb_plated_hole: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"pcb_plated_hole">;
    shape: z.ZodLiteral<"circle">;
    outer_diameter: z.ZodNumber;
    hole_diameter: z.ZodNumber;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layers: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>, "many">;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_plated_hole";
    hole_diameter: number;
    shape: "circle";
    outer_diameter: number;
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6")[];
    port_hints?: string[] | undefined;
    pcb_component_id?: string | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_plated_hole";
    hole_diameter: number;
    shape: "circle";
    outer_diameter: number;
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    })[];
    port_hints?: string[] | undefined;
    pcb_component_id?: string | undefined;
    pcb_port_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_plated_hole">;
    shape: z.ZodEnum<["oval", "pill"]>;
    outer_width: z.ZodNumber;
    outer_height: z.ZodNumber;
    hole_width: z.ZodNumber;
    hole_height: z.ZodNumber;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layers: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>, "many">;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_plated_hole";
    hole_width: number;
    hole_height: number;
    shape: "oval" | "pill";
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6")[];
    outer_width: number;
    outer_height: number;
    port_hints?: string[] | undefined;
    pcb_component_id?: string | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_plated_hole";
    hole_width: number;
    hole_height: number;
    shape: "oval" | "pill";
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    })[];
    outer_width: number;
    outer_height: number;
    port_hints?: string[] | undefined;
    pcb_component_id?: string | undefined;
    pcb_port_id?: string | undefined;
}>]>;
type PCBPlatedHoleInput = z.input<typeof pcb_plated_hole>;
type PCBPlatedHole = z.infer<typeof pcb_plated_hole>;

declare const pcb_port: z.ZodObject<{
    type: z.ZodLiteral<"pcb_port">;
    pcb_port_id: z.ZodString;
    source_port_id: z.ZodString;
    pcb_component_id: z.ZodString;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layers: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_port";
    source_port_id: string;
    pcb_component_id: string;
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6")[];
    pcb_port_id: string;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_port";
    source_port_id: string;
    pcb_component_id: string;
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    })[];
    pcb_port_id: string;
}>;
type PCBPort = z.infer<typeof pcb_port>;
type PCBPortInput = z.input<typeof pcb_port>;

declare const pcb_smtpad: z.ZodUnion<[z.ZodObject<{
    pcb_smtpad_id: z.ZodString;
    type: z.ZodLiteral<"pcb_smtpad">;
    shape: z.ZodLiteral<"circle">;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    radius: z.ZodNumber;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_smtpad";
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "circle";
    pcb_smtpad_id: string;
    radius: number;
    port_hints?: string[] | undefined;
    pcb_component_id?: string | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_smtpad";
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "circle";
    pcb_smtpad_id: string;
    radius: number;
    port_hints?: string[] | undefined;
    pcb_component_id?: string | undefined;
    pcb_port_id?: string | undefined;
}>, z.ZodObject<{
    pcb_smtpad_id: z.ZodString;
    type: z.ZodLiteral<"pcb_smtpad">;
    shape: z.ZodLiteral<"rect">;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodNumber;
    height: z.ZodNumber;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_smtpad";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "rect";
    pcb_smtpad_id: string;
    port_hints?: string[] | undefined;
    pcb_component_id?: string | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_smtpad";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "rect";
    pcb_smtpad_id: string;
    port_hints?: string[] | undefined;
    pcb_component_id?: string | undefined;
    pcb_port_id?: string | undefined;
}>]>;
type PCBSMTPadInput = z.input<typeof pcb_smtpad>;
type PCBSMTPad = z.infer<typeof pcb_smtpad>;

declare const pcb_text: z.ZodObject<{
    type: z.ZodLiteral<"pcb_text">;
    text: z.ZodString;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    align: z.ZodEnum<["bottom-left"]>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    lines: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_text";
    width: number;
    height: number;
    text: string;
    align: "bottom-left";
    lines: number;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_text";
    width: string | number;
    height: string | number;
    text: string;
    align: "bottom-left";
    lines: number;
}>;
type PCBTextInput = z.input<typeof pcb_text>;
type PCBText = z.infer<typeof pcb_text>;

declare const pcb_trace: z.ZodObject<{
    type: z.ZodLiteral<"pcb_trace">;
    source_trace_id: z.ZodOptional<z.ZodString>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_trace_id: z.ZodString;
    route: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        route_type: z.ZodLiteral<"wire">;
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        start_pcb_port_id: z.ZodOptional<z.ZodString>;
        end_pcb_port_id: z.ZodOptional<z.ZodString>;
        layer: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        width: number;
        layer: string;
        route_type: "wire";
        start_pcb_port_id?: string | undefined;
        end_pcb_port_id?: string | undefined;
    }, {
        x: string | number;
        y: string | number;
        width: string | number;
        layer: string;
        route_type: "wire";
        start_pcb_port_id?: string | undefined;
        end_pcb_port_id?: string | undefined;
    }>, z.ZodObject<{
        route_type: z.ZodLiteral<"via">;
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        from_layer: z.ZodString;
        to_layer: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        to_layer: string;
        route_type: "via";
        from_layer: string;
    }, {
        x: string | number;
        y: string | number;
        to_layer: string;
        route_type: "via";
        from_layer: string;
    }>]>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "pcb_trace";
    pcb_trace_id: string;
    route: ({
        x: number;
        y: number;
        width: number;
        layer: string;
        route_type: "wire";
        start_pcb_port_id?: string | undefined;
        end_pcb_port_id?: string | undefined;
    } | {
        x: number;
        y: number;
        to_layer: string;
        route_type: "via";
        from_layer: string;
    })[];
    source_trace_id?: string | undefined;
    pcb_component_id?: string | undefined;
}, {
    type: "pcb_trace";
    pcb_trace_id: string;
    route: ({
        x: string | number;
        y: string | number;
        width: string | number;
        layer: string;
        route_type: "wire";
        start_pcb_port_id?: string | undefined;
        end_pcb_port_id?: string | undefined;
    } | {
        x: string | number;
        y: string | number;
        to_layer: string;
        route_type: "via";
        from_layer: string;
    })[];
    source_trace_id?: string | undefined;
    pcb_component_id?: string | undefined;
}>;
type PCBTraceInput = z.input<typeof pcb_trace>;
type PCBTrace = z.output<typeof pcb_trace>;

declare const pcb_trace_error: z.ZodObject<{
    pcb_error_id: z.ZodString;
    type: z.ZodLiteral<"pcb_error">;
    error_type: z.ZodLiteral<"pcb_trace_error">;
    message: z.ZodString;
    pcb_trace_id: z.ZodString;
    source_trace_id: z.ZodString;
    pcb_component_ids: z.ZodArray<z.ZodString, "many">;
    pcb_port_ids: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "pcb_error";
    source_trace_id: string;
    error_type: "pcb_trace_error";
    pcb_trace_id: string;
    pcb_error_id: string;
    pcb_component_ids: string[];
    pcb_port_ids: string[];
}, {
    message: string;
    type: "pcb_error";
    source_trace_id: string;
    error_type: "pcb_trace_error";
    pcb_trace_id: string;
    pcb_error_id: string;
    pcb_component_ids: string[];
    pcb_port_ids: string[];
}>;
type PCBTraceErrorInput = z.input<typeof pcb_trace_error>;
type PCBTraceError = z.infer<typeof pcb_trace_error>;

declare const pcb_port_not_matched_error: z.ZodObject<{
    pcb_error_id: z.ZodString;
    type: z.ZodLiteral<"pcb_error">;
    error_type: z.ZodLiteral<"pcb_port_not_matched_error">;
    message: z.ZodString;
    pcb_component_ids: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "pcb_error";
    error_type: "pcb_port_not_matched_error";
    pcb_error_id: string;
    pcb_component_ids: string[];
}, {
    message: string;
    type: "pcb_error";
    error_type: "pcb_port_not_matched_error";
    pcb_error_id: string;
    pcb_component_ids: string[];
}>;
type PCBPortNotMatchedErrorInput = z.input<typeof pcb_port_not_matched_error>;
type PCBPortNotMatchedError = z.infer<typeof pcb_port_not_matched_error>;

declare const pcb_via: z.ZodObject<{
    type: z.ZodLiteral<"pcb_via">;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    outer_diameter: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    hole_diameter: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    /** @deprecated */
    from_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    /** @deprecated */
    to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    layers: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_via";
    hole_diameter: number;
    outer_diameter: number;
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6")[];
    to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    from_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_via";
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    })[];
    to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    hole_diameter?: string | number | undefined;
    outer_diameter?: string | number | undefined;
    from_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
}>;
type PCBViaInput = z.input<typeof pcb_via>;
type PCBVia = z.infer<typeof pcb_via>;

declare const pcb_board: z.ZodObject<{
    type: z.ZodLiteral<"pcb_board">;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_board";
    width: number;
    height: number;
    center: {
        x: number;
        y: number;
    };
}, {
    type: "pcb_board";
    width: string | number;
    height: string | number;
    center: {
        x: string | number;
        y: string | number;
    };
}>;
type PCBBoardInput = z.input<typeof pcb_board>;
type PCBBoard = z.infer<typeof pcb_board>;

declare const pcb_placement_error: z.ZodObject<{
    pcb_error_id: z.ZodString;
    type: z.ZodLiteral<"pcb_error">;
    error_type: z.ZodLiteral<"pcb_placement_error">;
    message: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "pcb_error";
    error_type: "pcb_placement_error";
    pcb_error_id: string;
}, {
    message: string;
    type: "pcb_error";
    error_type: "pcb_placement_error";
    pcb_error_id: string;
}>;
type PCBPlacementErrorInput = z.input<typeof pcb_placement_error>;
type PCBPlacementError = z.infer<typeof pcb_placement_error>;

declare const pcb_trace_hint: z.ZodObject<{
    pcb_trace_hint_id: z.ZodString;
    type: z.ZodLiteral<"pcb_trace_hint">;
    pcb_port_id: z.ZodString;
    pcb_component_id: z.ZodString;
    route: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        via: z.ZodOptional<z.ZodBoolean>;
        to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
            name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
        }, "strip", z.ZodTypeAny, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    }, {
        x: string | number;
        y: string | number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        } | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "pcb_trace_hint";
    pcb_component_id: string;
    pcb_port_id: string;
    route: {
        x: number;
        y: number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    }[];
    pcb_trace_hint_id: string;
}, {
    type: "pcb_trace_hint";
    pcb_component_id: string;
    pcb_port_id: string;
    route: {
        x: string | number;
        y: string | number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        } | undefined;
    }[];
    pcb_trace_hint_id: string;
}>;
type PcbTraceHint = z.infer<typeof pcb_trace_hint>;
type PcbTraceHintInput = z.input<typeof pcb_trace_hint>;

declare const pcb_silkscreen_line: z.ZodObject<{
    type: z.ZodLiteral<"pcb_silkscreen_line">;
    pcb_silkscreen_line_id: z.ZodString;
    pcb_component_id: z.ZodString;
    stroke_width: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    x1: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y1: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    x2: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y2: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layer: z.ZodEnum<["top", "bottom"]>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_silkscreen_line";
    x1: number;
    x2: number;
    y1: number;
    y2: number;
    pcb_component_id: string;
    layer: "top" | "bottom";
    pcb_silkscreen_line_id: string;
    stroke_width: number;
}, {
    type: "pcb_silkscreen_line";
    x1: string | number;
    x2: string | number;
    y1: string | number;
    y2: string | number;
    pcb_component_id: string;
    layer: "top" | "bottom";
    pcb_silkscreen_line_id: string;
    stroke_width?: string | number | undefined;
}>;
type PcbSilkscreenLine = z.infer<typeof pcb_silkscreen_line>;
type PcbSilkscreenLineInput = z.input<typeof pcb_silkscreen_line>;

declare const pcb_silkscreen_path: z.ZodObject<{
    type: z.ZodLiteral<"pcb_silkscreen_path">;
    pcb_silkscreen_path_id: z.ZodString;
    pcb_component_id: z.ZodString;
    layer: z.ZodEnum<["top", "bottom"]>;
    route: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">;
    stroke_width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_silkscreen_path";
    pcb_component_id: string;
    layer: "top" | "bottom";
    route: {
        x: number;
        y: number;
    }[];
    stroke_width: number;
    pcb_silkscreen_path_id: string;
}, {
    type: "pcb_silkscreen_path";
    pcb_component_id: string;
    layer: "top" | "bottom";
    route: {
        x: string | number;
        y: string | number;
    }[];
    stroke_width: string | number;
    pcb_silkscreen_path_id: string;
}>;
type PcbSilkscreenPath = z.infer<typeof pcb_silkscreen_path>;
type PcbSilkscreenPathInput = z.input<typeof pcb_silkscreen_path>;

declare const pcb_silkscreen_text: z.ZodObject<{
    type: z.ZodLiteral<"pcb_silkscreen_text">;
    font: z.ZodDefault<z.ZodLiteral<"tscircuit2024">>;
    font_size: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcb_component_id: z.ZodString;
    text: z.ZodString;
    layer: z.ZodEnum<["top", "bottom"]>;
    anchor_position: z.ZodDefault<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>>;
    anchor_alignment: z.ZodDefault<z.ZodEnum<["center", "top_left", "top_right", "bottom_left", "bottom_right"]>>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_silkscreen_text";
    text: string;
    pcb_component_id: string;
    layer: "top" | "bottom";
    font: "tscircuit2024";
    font_size: number;
    anchor_position: {
        x: number;
        y: number;
    };
    anchor_alignment: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right";
}, {
    type: "pcb_silkscreen_text";
    text: string;
    pcb_component_id: string;
    layer: "top" | "bottom";
    font?: "tscircuit2024" | undefined;
    font_size?: string | number | undefined;
    anchor_position?: {
        x: string | number;
        y: string | number;
    } | undefined;
    anchor_alignment?: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | undefined;
}>;
type PcbSilkscreenText = z.infer<typeof pcb_silkscreen_text>;
type PcbSilkscreenTextInput = z.input<typeof pcb_silkscreen_text>;

declare const pcb_silkscreen_rect: z.ZodObject<{
    type: z.ZodLiteral<"pcb_silkscreen_rect">;
    pcb_silkscreen_rect_id: z.ZodString;
    pcb_component_id: z.ZodString;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layer: z.ZodEnum<["top", "bottom"]>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_silkscreen_rect";
    width: number;
    height: number;
    center: {
        x: number;
        y: number;
    };
    pcb_component_id: string;
    layer: "top" | "bottom";
    pcb_silkscreen_rect_id: string;
}, {
    type: "pcb_silkscreen_rect";
    width: string | number;
    height: string | number;
    center: {
        x: string | number;
        y: string | number;
    };
    pcb_component_id: string;
    layer: "top" | "bottom";
    pcb_silkscreen_rect_id: string;
}>;
type PcbSilkscreenRect = z.infer<typeof pcb_silkscreen_rect>;
type PcbSilkscreenRectInput = z.input<typeof pcb_silkscreen_rect>;

declare const pcb_silkscreen_circle: z.ZodObject<{
    type: z.ZodLiteral<"pcb_silkscreen_circle">;
    pcb_silkscreen_circle_id: z.ZodString;
    pcb_component_id: z.ZodString;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    radius: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layer: z.ZodEnum<["top", "bottom"]>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_silkscreen_circle";
    center: {
        x: number;
        y: number;
    };
    pcb_component_id: string;
    layer: "top" | "bottom";
    radius: number;
    pcb_silkscreen_circle_id: string;
}, {
    type: "pcb_silkscreen_circle";
    center: {
        x: string | number;
        y: string | number;
    };
    pcb_component_id: string;
    layer: "top" | "bottom";
    radius: string | number;
    pcb_silkscreen_circle_id: string;
}>;
type PcbSilkscreenCircle = z.infer<typeof pcb_silkscreen_circle>;
type PcbSilkscreenCircleInput = z.input<typeof pcb_silkscreen_circle>;

declare const pcb_silkscreen_oval: z.ZodObject<{
    type: z.ZodLiteral<"pcb_silkscreen_oval">;
    pcb_silkscreen_oval_id: z.ZodString;
    pcb_component_id: z.ZodString;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    radius_x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    radius_y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layer: z.ZodEnum<["top", "bottom"]>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_silkscreen_oval";
    center: {
        x: number;
        y: number;
    };
    pcb_component_id: string;
    layer: "top" | "bottom";
    pcb_silkscreen_oval_id: string;
    radius_x: number;
    radius_y: number;
}, {
    type: "pcb_silkscreen_oval";
    center: {
        x: string | number;
        y: string | number;
    };
    pcb_component_id: string;
    layer: "top" | "bottom";
    pcb_silkscreen_oval_id: string;
    radius_x: string | number;
    radius_y: string | number;
}>;
type PcbSilkscreenOval = z.infer<typeof pcb_silkscreen_oval>;
type PcbSilkscreenOvalInput = z.input<typeof pcb_silkscreen_oval>;

declare const pcb_fabrication_note_text: z.ZodObject<{
    type: z.ZodLiteral<"pcb_fabrication_note_text">;
    font: z.ZodDefault<z.ZodLiteral<"tscircuit2024">>;
    font_size: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcb_component_id: z.ZodString;
    text: z.ZodString;
    layer: z.ZodEnum<["top", "bottom"]>;
    anchor_position: z.ZodDefault<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>>;
    anchor_alignment: z.ZodDefault<z.ZodEnum<["center", "top_left", "top_right", "bottom_left", "bottom_right"]>>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_fabrication_note_text";
    text: string;
    pcb_component_id: string;
    layer: "top" | "bottom";
    font: "tscircuit2024";
    font_size: number;
    anchor_position: {
        x: number;
        y: number;
    };
    anchor_alignment: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right";
}, {
    type: "pcb_fabrication_note_text";
    text: string;
    pcb_component_id: string;
    layer: "top" | "bottom";
    font?: "tscircuit2024" | undefined;
    font_size?: string | number | undefined;
    anchor_position?: {
        x: string | number;
        y: string | number;
    } | undefined;
    anchor_alignment?: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | undefined;
}>;
type PcbFabricationNoteText = z.infer<typeof pcb_fabrication_note_text>;
type PcbFabricationNoteTextInput = z.input<typeof pcb_fabrication_note_text>;

declare const pcb_fabrication_note_path: z.ZodObject<{
    type: z.ZodLiteral<"pcb_fabrication_note_path">;
    fabrication_note_path_id: z.ZodString;
    pcb_component_id: z.ZodString;
    layer: z.ZodEnum<["top", "bottom"]>;
    route: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">;
    stroke_width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_fabrication_note_path";
    pcb_component_id: string;
    layer: "top" | "bottom";
    route: {
        x: number;
        y: number;
    }[];
    stroke_width: number;
    fabrication_note_path_id: string;
}, {
    type: "pcb_fabrication_note_path";
    pcb_component_id: string;
    layer: "top" | "bottom";
    route: {
        x: string | number;
        y: string | number;
    }[];
    stroke_width: string | number;
    fabrication_note_path_id: string;
}>;
type PcbFabricationNotePath = z.infer<typeof pcb_fabrication_note_path>;
type PcbFabricationNotePathInput = z.input<typeof pcb_fabrication_note_path>;

declare const cad_component: z.ZodObject<{
    type: z.ZodLiteral<"cad_component">;
    cad_component_id: z.ZodString;
    pcb_component_id: z.ZodString;
    source_component_id: z.ZodString;
    position: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>;
    rotation: z.ZodOptional<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>>;
    size: z.ZodOptional<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprinter_string: z.ZodOptional<z.ZodString>;
    model_obj_url: z.ZodOptional<z.ZodString>;
    model_stl_url: z.ZodOptional<z.ZodString>;
    model_3mf_url: z.ZodOptional<z.ZodString>;
    model_jscad: z.ZodOptional<z.ZodArray<z.ZodAny, "many">>;
}, "strip", z.ZodTypeAny, {
    type: "cad_component";
    source_component_id: string;
    position: {
        x: number;
        y: number;
        z: number;
    };
    pcb_component_id: string;
    cad_component_id: string;
    rotation?: {
        x: number;
        y: number;
        z: number;
    } | undefined;
    size?: {
        x: number;
        y: number;
        z: number;
    } | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    footprinter_string?: string | undefined;
    model_obj_url?: string | undefined;
    model_stl_url?: string | undefined;
    model_3mf_url?: string | undefined;
    model_jscad?: any[] | undefined;
}, {
    type: "cad_component";
    source_component_id: string;
    position: {
        x: string | number;
        y: string | number;
        z: string | number;
    };
    pcb_component_id: string;
    cad_component_id: string;
    rotation?: {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    size?: {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    footprinter_string?: string | undefined;
    model_obj_url?: string | undefined;
    model_stl_url?: string | undefined;
    model_3mf_url?: string | undefined;
    model_jscad?: any[] | undefined;
}>;
type CadComponentInput = z.input<typeof cad_component>;
type CadComponent = z.infer<typeof cad_component>;

declare const any_soup_element: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"source_trace">;
    source_trace_id: z.ZodString;
    connected_source_port_ids: z.ZodArray<z.ZodString, "many">;
    connected_source_net_ids: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    type: "source_trace";
    source_trace_id: string;
    connected_source_port_ids: string[];
    connected_source_net_ids: string[];
}, {
    type: "source_trace";
    source_trace_id: string;
    connected_source_port_ids: string[];
    connected_source_net_ids: string[];
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_port">;
    pin_number: z.ZodOptional<z.ZodNumber>;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    name: z.ZodString;
    source_port_id: z.ZodString;
    source_component_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "source_port";
    source_component_id: string;
    name: string;
    source_port_id: string;
    pin_number?: number | undefined;
    port_hints?: string[] | undefined;
}, {
    type: "source_port";
    source_component_id: string;
    name: string;
    source_port_id: string;
    pin_number?: number | undefined;
    port_hints?: string[] | undefined;
}>, z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"source_component">;
    ftype: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, {
    ftype: z.ZodLiteral<"simple_resistor">;
    resistance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}>, "strip", z.ZodTypeAny, {
    type: "source_component";
    ftype: "simple_resistor";
    source_component_id: string;
    name: string;
    resistance: number;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    type: "source_component";
    ftype: "simple_resistor";
    source_component_id: string;
    name: string;
    resistance: string | number;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"source_component">;
    ftype: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, {
    ftype: z.ZodLiteral<"simple_capacitor">;
    capacitance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}>, "strip", z.ZodTypeAny, {
    type: "source_component";
    ftype: "simple_capacitor";
    source_component_id: string;
    name: string;
    capacitance: number;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    type: "source_component";
    ftype: "simple_capacitor";
    source_component_id: string;
    name: string;
    capacitance: string | number;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"source_component">;
    ftype: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, {
    ftype: z.ZodLiteral<"simple_diode">;
}>, "strip", z.ZodTypeAny, {
    type: "source_component";
    ftype: "simple_diode";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    type: "source_component";
    ftype: "simple_diode";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"source_component">;
    ftype: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, {
    ftype: z.ZodLiteral<"simple_ground">;
}>, "strip", z.ZodTypeAny, {
    type: "source_component";
    ftype: "simple_ground";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    type: "source_component";
    ftype: "simple_ground";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"source_component">;
    ftype: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, {
    ftype: z.ZodLiteral<"simple_bug">;
}>, "strip", z.ZodTypeAny, {
    type: "source_component";
    ftype: "simple_bug";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    type: "source_component";
    ftype: "simple_bug";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"source_component">;
    ftype: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, {
    ftype: z.ZodLiteral<"simple_diode">;
}>, {
    ftype: z.ZodLiteral<"led">;
}>, "strip", z.ZodTypeAny, {
    type: "source_component";
    ftype: "led";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    type: "source_component";
    ftype: "led";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"source_component">;
    ftype: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, {
    ftype: z.ZodLiteral<"simple_power_source">;
    voltage: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}>, "strip", z.ZodTypeAny, {
    voltage: number;
    type: "source_component";
    ftype: "simple_power_source";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    voltage: string | number;
    type: "source_component";
    ftype: "simple_power_source";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>]>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"source_component">;
    ftype: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, {
    ftype: z.ZodLiteral<"simple_diode">;
}>, {
    ftype: z.ZodLiteral<"led">;
}>, "strip", z.ZodTypeAny, {
    type: "source_component";
    ftype: "led";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    type: "source_component";
    ftype: "led";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_net">;
    source_net_id: z.ZodString;
    name: z.ZodString;
    member_source_group_ids: z.ZodArray<z.ZodString, "many">;
    is_power: z.ZodOptional<z.ZodBoolean>;
    is_ground: z.ZodOptional<z.ZodBoolean>;
    is_digital_signal: z.ZodOptional<z.ZodBoolean>;
    is_analog_signal: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    type: "source_net";
    name: string;
    source_net_id: string;
    member_source_group_ids: string[];
    is_power?: boolean | undefined;
    is_ground?: boolean | undefined;
    is_digital_signal?: boolean | undefined;
    is_analog_signal?: boolean | undefined;
}, {
    type: "source_net";
    name: string;
    source_net_id: string;
    member_source_group_ids: string[];
    is_power?: boolean | undefined;
    is_ground?: boolean | undefined;
    is_digital_signal?: boolean | undefined;
    is_analog_signal?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_group">;
    source_group_id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_group";
    source_group_id: string;
    name?: string | undefined;
}, {
    type: "source_group";
    source_group_id: string;
    name?: string | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"source_component">;
    ftype: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, {
    ftype: z.ZodLiteral<"simple_bug">;
}>, "strip", z.ZodTypeAny, {
    type: "source_component";
    ftype: "simple_bug";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    type: "source_component";
    ftype: "simple_bug";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"source_component">;
    ftype: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, {
    ftype: z.ZodLiteral<"simple_capacitor">;
    capacitance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}>, "strip", z.ZodTypeAny, {
    type: "source_component";
    ftype: "simple_capacitor";
    source_component_id: string;
    name: string;
    capacitance: number;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    type: "source_component";
    ftype: "simple_capacitor";
    source_component_id: string;
    name: string;
    capacitance: string | number;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"source_component">;
    ftype: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, {
    ftype: z.ZodLiteral<"simple_diode">;
}>, "strip", z.ZodTypeAny, {
    type: "source_component";
    ftype: "simple_diode";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    type: "source_component";
    ftype: "simple_diode";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"source_component">;
    ftype: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, {
    ftype: z.ZodLiteral<"simple_resistor">;
    resistance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}>, "strip", z.ZodTypeAny, {
    type: "source_component";
    ftype: "simple_resistor";
    source_component_id: string;
    name: string;
    resistance: number;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    type: "source_component";
    ftype: "simple_resistor";
    source_component_id: string;
    name: string;
    resistance: string | number;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodLiteral<"source_component">;
    ftype: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, {
    ftype: z.ZodLiteral<"simple_power_source">;
    voltage: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}>, "strip", z.ZodTypeAny, {
    voltage: number;
    type: "source_component";
    ftype: "simple_power_source";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    voltage: string | number;
    type: "source_component";
    ftype: "simple_power_source";
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_component">;
    pcb_component_id: z.ZodString;
    source_component_id: z.ZodString;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    rotation: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_component";
    width: number;
    height: number;
    source_component_id: string;
    rotation: number;
    center: {
        x: number;
        y: number;
    };
    pcb_component_id: string;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
}, {
    type: "pcb_component";
    width: string | number;
    height: string | number;
    source_component_id: string;
    rotation: string | number;
    center: {
        x: string | number;
        y: string | number;
    };
    pcb_component_id: string;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
}>, z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"pcb_hole">;
    hole_shape: z.ZodDefault<z.ZodEnum<["round", "square"]>>;
    hole_diameter: z.ZodNumber;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_hole";
    hole_shape: "round" | "square";
    hole_diameter: number;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_hole";
    hole_diameter: number;
    hole_shape?: "round" | "square" | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_hole">;
    hole_shape: z.ZodLiteral<"oval">;
    hole_width: z.ZodNumber;
    hole_height: z.ZodNumber;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_hole";
    hole_shape: "oval";
    hole_width: number;
    hole_height: number;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_hole";
    hole_shape: "oval";
    hole_width: number;
    hole_height: number;
}>]>, z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"pcb_plated_hole">;
    shape: z.ZodLiteral<"circle">;
    outer_diameter: z.ZodNumber;
    hole_diameter: z.ZodNumber;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layers: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>, "many">;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_plated_hole";
    hole_diameter: number;
    shape: "circle";
    outer_diameter: number;
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6")[];
    port_hints?: string[] | undefined;
    pcb_component_id?: string | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_plated_hole";
    hole_diameter: number;
    shape: "circle";
    outer_diameter: number;
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    })[];
    port_hints?: string[] | undefined;
    pcb_component_id?: string | undefined;
    pcb_port_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_plated_hole">;
    shape: z.ZodEnum<["oval", "pill"]>;
    outer_width: z.ZodNumber;
    outer_height: z.ZodNumber;
    hole_width: z.ZodNumber;
    hole_height: z.ZodNumber;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layers: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>, "many">;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_plated_hole";
    hole_width: number;
    hole_height: number;
    shape: "oval" | "pill";
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6")[];
    outer_width: number;
    outer_height: number;
    port_hints?: string[] | undefined;
    pcb_component_id?: string | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_plated_hole";
    hole_width: number;
    hole_height: number;
    shape: "oval" | "pill";
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    })[];
    outer_width: number;
    outer_height: number;
    port_hints?: string[] | undefined;
    pcb_component_id?: string | undefined;
    pcb_port_id?: string | undefined;
}>]>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_port">;
    pcb_port_id: z.ZodString;
    source_port_id: z.ZodString;
    pcb_component_id: z.ZodString;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layers: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_port";
    source_port_id: string;
    pcb_component_id: string;
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6")[];
    pcb_port_id: string;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_port";
    source_port_id: string;
    pcb_component_id: string;
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    })[];
    pcb_port_id: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_text">;
    text: z.ZodString;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    align: z.ZodEnum<["bottom-left"]>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    lines: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_text";
    width: number;
    height: number;
    text: string;
    align: "bottom-left";
    lines: number;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_text";
    width: string | number;
    height: string | number;
    text: string;
    align: "bottom-left";
    lines: number;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_trace">;
    source_trace_id: z.ZodOptional<z.ZodString>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_trace_id: z.ZodString;
    route: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        route_type: z.ZodLiteral<"wire">;
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        start_pcb_port_id: z.ZodOptional<z.ZodString>;
        end_pcb_port_id: z.ZodOptional<z.ZodString>;
        layer: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        width: number;
        layer: string;
        route_type: "wire";
        start_pcb_port_id?: string | undefined;
        end_pcb_port_id?: string | undefined;
    }, {
        x: string | number;
        y: string | number;
        width: string | number;
        layer: string;
        route_type: "wire";
        start_pcb_port_id?: string | undefined;
        end_pcb_port_id?: string | undefined;
    }>, z.ZodObject<{
        route_type: z.ZodLiteral<"via">;
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        from_layer: z.ZodString;
        to_layer: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        to_layer: string;
        route_type: "via";
        from_layer: string;
    }, {
        x: string | number;
        y: string | number;
        to_layer: string;
        route_type: "via";
        from_layer: string;
    }>]>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "pcb_trace";
    pcb_trace_id: string;
    route: ({
        x: number;
        y: number;
        width: number;
        layer: string;
        route_type: "wire";
        start_pcb_port_id?: string | undefined;
        end_pcb_port_id?: string | undefined;
    } | {
        x: number;
        y: number;
        to_layer: string;
        route_type: "via";
        from_layer: string;
    })[];
    source_trace_id?: string | undefined;
    pcb_component_id?: string | undefined;
}, {
    type: "pcb_trace";
    pcb_trace_id: string;
    route: ({
        x: string | number;
        y: string | number;
        width: string | number;
        layer: string;
        route_type: "wire";
        start_pcb_port_id?: string | undefined;
        end_pcb_port_id?: string | undefined;
    } | {
        x: string | number;
        y: string | number;
        to_layer: string;
        route_type: "via";
        from_layer: string;
    })[];
    source_trace_id?: string | undefined;
    pcb_component_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_via">;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    outer_diameter: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    hole_diameter: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    from_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    layers: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_via";
    hole_diameter: number;
    outer_diameter: number;
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6")[];
    to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    from_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_via";
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    })[];
    to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    hole_diameter?: string | number | undefined;
    outer_diameter?: string | number | undefined;
    from_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
}>, z.ZodUnion<[z.ZodObject<{
    pcb_smtpad_id: z.ZodString;
    type: z.ZodLiteral<"pcb_smtpad">;
    shape: z.ZodLiteral<"circle">;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    radius: z.ZodNumber;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_smtpad";
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "circle";
    pcb_smtpad_id: string;
    radius: number;
    port_hints?: string[] | undefined;
    pcb_component_id?: string | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_smtpad";
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "circle";
    pcb_smtpad_id: string;
    radius: number;
    port_hints?: string[] | undefined;
    pcb_component_id?: string | undefined;
    pcb_port_id?: string | undefined;
}>, z.ZodObject<{
    pcb_smtpad_id: z.ZodString;
    type: z.ZodLiteral<"pcb_smtpad">;
    shape: z.ZodLiteral<"rect">;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodNumber;
    height: z.ZodNumber;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_smtpad";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "rect";
    pcb_smtpad_id: string;
    port_hints?: string[] | undefined;
    pcb_component_id?: string | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_smtpad";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "rect";
    pcb_smtpad_id: string;
    port_hints?: string[] | undefined;
    pcb_component_id?: string | undefined;
    pcb_port_id?: string | undefined;
}>]>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_board">;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_board";
    width: number;
    height: number;
    center: {
        x: number;
        y: number;
    };
}, {
    type: "pcb_board";
    width: string | number;
    height: string | number;
    center: {
        x: string | number;
        y: string | number;
    };
}>, z.ZodObject<{
    pcb_trace_hint_id: z.ZodString;
    type: z.ZodLiteral<"pcb_trace_hint">;
    pcb_port_id: z.ZodString;
    pcb_component_id: z.ZodString;
    route: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        via: z.ZodOptional<z.ZodBoolean>;
        to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
            name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
        }, "strip", z.ZodTypeAny, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    }, {
        x: string | number;
        y: string | number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        } | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "pcb_trace_hint";
    pcb_component_id: string;
    pcb_port_id: string;
    route: {
        x: number;
        y: number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    }[];
    pcb_trace_hint_id: string;
}, {
    type: "pcb_trace_hint";
    pcb_component_id: string;
    pcb_port_id: string;
    route: {
        x: string | number;
        y: string | number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        } | undefined;
    }[];
    pcb_trace_hint_id: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_silkscreen_line">;
    pcb_silkscreen_line_id: z.ZodString;
    pcb_component_id: z.ZodString;
    stroke_width: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    x1: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y1: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    x2: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y2: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layer: z.ZodEnum<["top", "bottom"]>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_silkscreen_line";
    x1: number;
    x2: number;
    y1: number;
    y2: number;
    pcb_component_id: string;
    layer: "top" | "bottom";
    pcb_silkscreen_line_id: string;
    stroke_width: number;
}, {
    type: "pcb_silkscreen_line";
    x1: string | number;
    x2: string | number;
    y1: string | number;
    y2: string | number;
    pcb_component_id: string;
    layer: "top" | "bottom";
    pcb_silkscreen_line_id: string;
    stroke_width?: string | number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_silkscreen_path">;
    pcb_silkscreen_path_id: z.ZodString;
    pcb_component_id: z.ZodString;
    layer: z.ZodEnum<["top", "bottom"]>;
    route: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">;
    stroke_width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_silkscreen_path";
    pcb_component_id: string;
    layer: "top" | "bottom";
    route: {
        x: number;
        y: number;
    }[];
    stroke_width: number;
    pcb_silkscreen_path_id: string;
}, {
    type: "pcb_silkscreen_path";
    pcb_component_id: string;
    layer: "top" | "bottom";
    route: {
        x: string | number;
        y: string | number;
    }[];
    stroke_width: string | number;
    pcb_silkscreen_path_id: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_silkscreen_text">;
    font: z.ZodDefault<z.ZodLiteral<"tscircuit2024">>;
    font_size: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcb_component_id: z.ZodString;
    text: z.ZodString;
    layer: z.ZodEnum<["top", "bottom"]>;
    anchor_position: z.ZodDefault<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>>;
    anchor_alignment: z.ZodDefault<z.ZodEnum<["center", "top_left", "top_right", "bottom_left", "bottom_right"]>>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_silkscreen_text";
    text: string;
    pcb_component_id: string;
    layer: "top" | "bottom";
    font: "tscircuit2024";
    font_size: number;
    anchor_position: {
        x: number;
        y: number;
    };
    anchor_alignment: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right";
}, {
    type: "pcb_silkscreen_text";
    text: string;
    pcb_component_id: string;
    layer: "top" | "bottom";
    font?: "tscircuit2024" | undefined;
    font_size?: string | number | undefined;
    anchor_position?: {
        x: string | number;
        y: string | number;
    } | undefined;
    anchor_alignment?: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_silkscreen_rect">;
    pcb_silkscreen_rect_id: z.ZodString;
    pcb_component_id: z.ZodString;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layer: z.ZodEnum<["top", "bottom"]>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_silkscreen_rect";
    width: number;
    height: number;
    center: {
        x: number;
        y: number;
    };
    pcb_component_id: string;
    layer: "top" | "bottom";
    pcb_silkscreen_rect_id: string;
}, {
    type: "pcb_silkscreen_rect";
    width: string | number;
    height: string | number;
    center: {
        x: string | number;
        y: string | number;
    };
    pcb_component_id: string;
    layer: "top" | "bottom";
    pcb_silkscreen_rect_id: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_silkscreen_circle">;
    pcb_silkscreen_circle_id: z.ZodString;
    pcb_component_id: z.ZodString;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    radius: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layer: z.ZodEnum<["top", "bottom"]>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_silkscreen_circle";
    center: {
        x: number;
        y: number;
    };
    pcb_component_id: string;
    layer: "top" | "bottom";
    radius: number;
    pcb_silkscreen_circle_id: string;
}, {
    type: "pcb_silkscreen_circle";
    center: {
        x: string | number;
        y: string | number;
    };
    pcb_component_id: string;
    layer: "top" | "bottom";
    radius: string | number;
    pcb_silkscreen_circle_id: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_silkscreen_oval">;
    pcb_silkscreen_oval_id: z.ZodString;
    pcb_component_id: z.ZodString;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    radius_x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    radius_y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layer: z.ZodEnum<["top", "bottom"]>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_silkscreen_oval";
    center: {
        x: number;
        y: number;
    };
    pcb_component_id: string;
    layer: "top" | "bottom";
    pcb_silkscreen_oval_id: string;
    radius_x: number;
    radius_y: number;
}, {
    type: "pcb_silkscreen_oval";
    center: {
        x: string | number;
        y: string | number;
    };
    pcb_component_id: string;
    layer: "top" | "bottom";
    pcb_silkscreen_oval_id: string;
    radius_x: string | number;
    radius_y: string | number;
}>, z.ZodObject<{
    pcb_error_id: z.ZodString;
    type: z.ZodLiteral<"pcb_error">;
    error_type: z.ZodLiteral<"pcb_trace_error">;
    message: z.ZodString;
    pcb_trace_id: z.ZodString;
    source_trace_id: z.ZodString;
    pcb_component_ids: z.ZodArray<z.ZodString, "many">;
    pcb_port_ids: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "pcb_error";
    source_trace_id: string;
    error_type: "pcb_trace_error";
    pcb_trace_id: string;
    pcb_error_id: string;
    pcb_component_ids: string[];
    pcb_port_ids: string[];
}, {
    message: string;
    type: "pcb_error";
    source_trace_id: string;
    error_type: "pcb_trace_error";
    pcb_trace_id: string;
    pcb_error_id: string;
    pcb_component_ids: string[];
    pcb_port_ids: string[];
}>, z.ZodObject<{
    pcb_error_id: z.ZodString;
    type: z.ZodLiteral<"pcb_error">;
    error_type: z.ZodLiteral<"pcb_placement_error">;
    message: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "pcb_error";
    error_type: "pcb_placement_error";
    pcb_error_id: string;
}, {
    message: string;
    type: "pcb_error";
    error_type: "pcb_placement_error";
    pcb_error_id: string;
}>, z.ZodObject<{
    pcb_error_id: z.ZodString;
    type: z.ZodLiteral<"pcb_error">;
    error_type: z.ZodLiteral<"pcb_port_not_matched_error">;
    message: z.ZodString;
    pcb_component_ids: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "pcb_error";
    error_type: "pcb_port_not_matched_error";
    pcb_error_id: string;
    pcb_component_ids: string[];
}, {
    message: string;
    type: "pcb_error";
    error_type: "pcb_port_not_matched_error";
    pcb_error_id: string;
    pcb_component_ids: string[];
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_fabrication_note_path">;
    fabrication_note_path_id: z.ZodString;
    pcb_component_id: z.ZodString;
    layer: z.ZodEnum<["top", "bottom"]>;
    route: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">;
    stroke_width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_fabrication_note_path";
    pcb_component_id: string;
    layer: "top" | "bottom";
    route: {
        x: number;
        y: number;
    }[];
    stroke_width: number;
    fabrication_note_path_id: string;
}, {
    type: "pcb_fabrication_note_path";
    pcb_component_id: string;
    layer: "top" | "bottom";
    route: {
        x: string | number;
        y: string | number;
    }[];
    stroke_width: string | number;
    fabrication_note_path_id: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_fabrication_note_text">;
    font: z.ZodDefault<z.ZodLiteral<"tscircuit2024">>;
    font_size: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcb_component_id: z.ZodString;
    text: z.ZodString;
    layer: z.ZodEnum<["top", "bottom"]>;
    anchor_position: z.ZodDefault<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>>;
    anchor_alignment: z.ZodDefault<z.ZodEnum<["center", "top_left", "top_right", "bottom_left", "bottom_right"]>>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_fabrication_note_text";
    text: string;
    pcb_component_id: string;
    layer: "top" | "bottom";
    font: "tscircuit2024";
    font_size: number;
    anchor_position: {
        x: number;
        y: number;
    };
    anchor_alignment: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right";
}, {
    type: "pcb_fabrication_note_text";
    text: string;
    pcb_component_id: string;
    layer: "top" | "bottom";
    font?: "tscircuit2024" | undefined;
    font_size?: string | number | undefined;
    anchor_position?: {
        x: string | number;
        y: string | number;
    } | undefined;
    anchor_alignment?: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_box">;
    schematic_component_id: z.ZodString;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "schematic_box";
    width: number;
    height: number;
    schematic_component_id: string;
}, {
    x: string | number;
    y: string | number;
    type: "schematic_box";
    width: string | number;
    height: string | number;
    schematic_component_id: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_text">;
    schematic_component_id: z.ZodString;
    schematic_text_id: z.ZodString;
    text: z.ZodString;
    position: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    rotation: z.ZodDefault<z.ZodNumber>;
    anchor: z.ZodDefault<z.ZodEnum<["center", "left", "right", "top", "bottom"]>>;
}, "strip", z.ZodTypeAny, {
    anchor: "center" | "left" | "right" | "top" | "bottom";
    type: "schematic_text";
    schematic_component_id: string;
    rotation: number;
    schematic_text_id: string;
    text: string;
    position: {
        x: number;
        y: number;
    };
}, {
    type: "schematic_text";
    schematic_component_id: string;
    schematic_text_id: string;
    text: string;
    position: {
        x: string | number;
        y: string | number;
    };
    anchor?: "center" | "left" | "right" | "top" | "bottom" | undefined;
    rotation?: number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_line">;
    schematic_component_id: z.ZodString;
    x1: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    x2: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y1: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y2: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_line";
    schematic_component_id: string;
    x1: number;
    x2: number;
    y1: number;
    y2: number;
}, {
    type: "schematic_line";
    schematic_component_id: string;
    x1: string | number;
    x2: string | number;
    y1: string | number;
    y2: string | number;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_component">;
    rotation: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    size: z.ZodObject<{
        width: z.ZodNumber;
        height: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        width: number;
        height: number;
    }, {
        width: number;
        height: number;
    }>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    source_component_id: z.ZodString;
    schematic_component_id: z.ZodString;
    pin_spacing: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    box_width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    port_arrangement: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        left_size: z.ZodNumber;
        right_size: z.ZodNumber;
        top_size: z.ZodOptional<z.ZodNumber>;
        bottom_size: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        left_size: number;
        right_size: number;
        top_size?: number | undefined;
        bottom_size?: number | undefined;
    }, {
        left_size: number;
        right_size: number;
        top_size?: number | undefined;
        bottom_size?: number | undefined;
    }>, z.ZodObject<{
        left_side: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodNumber, "many">;
            direction: z.ZodOptional<z.ZodEnum<["top-to-bottom", "bottom-to-top"]>>;
        }, "strip", z.ZodTypeAny, {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        }, {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        }>>;
        right_side: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodNumber, "many">;
            direction: z.ZodOptional<z.ZodEnum<["top-to-bottom", "bottom-to-top"]>>;
        }, "strip", z.ZodTypeAny, {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        }, {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        }>>;
        top_side: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodNumber, "many">;
            direction: z.ZodOptional<z.ZodEnum<["left-to-right", "right-to-left"]>>;
        }, "strip", z.ZodTypeAny, {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        }, {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        }>>;
        bottom_side: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodNumber, "many">;
            direction: z.ZodOptional<z.ZodEnum<["left-to-right", "right-to-left"]>>;
        }, "strip", z.ZodTypeAny, {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        }, {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        left_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        right_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        top_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
        bottom_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
    }, {
        left_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        right_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        top_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
        bottom_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
    }>]>>;
    port_labels: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_component";
    source_component_id: string;
    schematic_component_id: string;
    rotation: number;
    size: {
        width: number;
        height: number;
    };
    center: {
        x: number;
        y: number;
    };
    pin_spacing?: number | undefined;
    box_width?: number | undefined;
    port_arrangement?: {
        left_size: number;
        right_size: number;
        top_size?: number | undefined;
        bottom_size?: number | undefined;
    } | {
        left_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        right_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        top_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
        bottom_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
    } | undefined;
    port_labels?: Record<string, string> | undefined;
}, {
    type: "schematic_component";
    source_component_id: string;
    schematic_component_id: string;
    size: {
        width: number;
        height: number;
    };
    center: {
        x: string | number;
        y: string | number;
    };
    rotation?: string | number | undefined;
    pin_spacing?: string | number | undefined;
    box_width?: string | number | undefined;
    port_arrangement?: {
        left_size: number;
        right_size: number;
        top_size?: number | undefined;
        bottom_size?: number | undefined;
    } | {
        left_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        right_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        top_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
        bottom_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
    } | undefined;
    port_labels?: Record<string, string> | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_port">;
    schematic_port_id: z.ZodString;
    source_port_id: z.ZodString;
    schematic_component_id: z.ZodOptional<z.ZodString>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    facing_direction: z.ZodOptional<z.ZodEnum<["up", "down", "left", "right"]>>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_port";
    source_port_id: string;
    center: {
        x: number;
        y: number;
    };
    schematic_port_id: string;
    schematic_component_id?: string | undefined;
    facing_direction?: "left" | "right" | "up" | "down" | undefined;
}, {
    type: "schematic_port";
    source_port_id: string;
    center: {
        x: string | number;
        y: string | number;
    };
    schematic_port_id: string;
    schematic_component_id?: string | undefined;
    facing_direction?: "left" | "right" | "up" | "down" | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_trace">;
    schematic_trace_id: z.ZodString;
    source_trace_id: z.ZodString;
    edges: z.ZodArray<z.ZodObject<{
        from: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: number;
            y: number;
        }>;
        to: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: number;
            y: number;
        }>;
        from_schematic_port_id: z.ZodOptional<z.ZodString>;
        to_schematic_port_id: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        from: {
            x: number;
            y: number;
        };
        to: {
            x: number;
            y: number;
        };
        from_schematic_port_id?: string | undefined;
        to_schematic_port_id?: string | undefined;
    }, {
        from: {
            x: number;
            y: number;
        };
        to: {
            x: number;
            y: number;
        };
        from_schematic_port_id?: string | undefined;
        to_schematic_port_id?: string | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "schematic_trace";
    source_trace_id: string;
    schematic_trace_id: string;
    edges: {
        from: {
            x: number;
            y: number;
        };
        to: {
            x: number;
            y: number;
        };
        from_schematic_port_id?: string | undefined;
        to_schematic_port_id?: string | undefined;
    }[];
}, {
    type: "schematic_trace";
    source_trace_id: string;
    schematic_trace_id: string;
    edges: {
        from: {
            x: number;
            y: number;
        };
        to: {
            x: number;
            y: number;
        };
        from_schematic_port_id?: string | undefined;
        to_schematic_port_id?: string | undefined;
    }[];
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_path">;
    schematic_component_id: z.ZodString;
    fill_color: z.ZodOptional<z.ZodEnum<["red", "blue"]>>;
    is_filled: z.ZodOptional<z.ZodBoolean>;
    points: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "schematic_path";
    schematic_component_id: string;
    points: {
        x: number;
        y: number;
    }[];
    fill_color?: "red" | "blue" | undefined;
    is_filled?: boolean | undefined;
}, {
    type: "schematic_path";
    schematic_component_id: string;
    points: {
        x: string | number;
        y: string | number;
    }[];
    fill_color?: "red" | "blue" | undefined;
    is_filled?: boolean | undefined;
}>, z.ZodObject<{
    schematic_error_id: z.ZodString;
    type: z.ZodLiteral<"schematic_error">;
    error_type: z.ZodLiteral<"schematic_port_not_found">;
    message: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "schematic_error";
    schematic_error_id: string;
    error_type: "schematic_port_not_found";
}, {
    message: string;
    type: "schematic_error";
    schematic_error_id: string;
    error_type: "schematic_port_not_found";
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_net_label">;
    source_net_id: z.ZodString;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    anchor_side: z.ZodEnum<["top", "bottom", "left", "right"]>;
    text: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "schematic_net_label";
    source_net_id: string;
    center: {
        x: number;
        y: number;
    };
    text: string;
    anchor_side: "left" | "right" | "top" | "bottom";
}, {
    type: "schematic_net_label";
    source_net_id: string;
    center: {
        x: string | number;
        y: string | number;
    };
    text: string;
    anchor_side: "left" | "right" | "top" | "bottom";
}>, z.ZodObject<{
    type: z.ZodLiteral<"cad_component">;
    cad_component_id: z.ZodString;
    pcb_component_id: z.ZodString;
    source_component_id: z.ZodString;
    position: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>;
    rotation: z.ZodOptional<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>>;
    size: z.ZodOptional<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprinter_string: z.ZodOptional<z.ZodString>;
    model_obj_url: z.ZodOptional<z.ZodString>;
    model_stl_url: z.ZodOptional<z.ZodString>;
    model_3mf_url: z.ZodOptional<z.ZodString>;
    model_jscad: z.ZodOptional<z.ZodArray<z.ZodAny, "many">>;
}, "strip", z.ZodTypeAny, {
    type: "cad_component";
    source_component_id: string;
    position: {
        x: number;
        y: number;
        z: number;
    };
    pcb_component_id: string;
    cad_component_id: string;
    rotation?: {
        x: number;
        y: number;
        z: number;
    } | undefined;
    size?: {
        x: number;
        y: number;
        z: number;
    } | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    footprinter_string?: string | undefined;
    model_obj_url?: string | undefined;
    model_stl_url?: string | undefined;
    model_3mf_url?: string | undefined;
    model_jscad?: any[] | undefined;
}, {
    type: "cad_component";
    source_component_id: string;
    position: {
        x: string | number;
        y: string | number;
        z: string | number;
    };
    pcb_component_id: string;
    cad_component_id: string;
    rotation?: {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    size?: {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    footprinter_string?: string | undefined;
    model_obj_url?: string | undefined;
    model_stl_url?: string | undefined;
    model_3mf_url?: string | undefined;
    model_jscad?: any[] | undefined;
}>]>;
type AnySoupElement = z.infer<typeof any_soup_element>;
type AnySoupElementInput = z.input<typeof any_soup_element>;

export { type AnySoupElement, type AnySoupElementInput, type AnySourceComponent, type CadComponent, type CadComponentInput, type InputPoint, type InputPosition, type LayerRef, type LayerRefInput, type PCBBoard, type PCBBoardInput, type PCBComponent, type PCBComponentInput, type PCBHole, type PCBHoleInput, type PCBPlacementError, type PCBPlacementErrorInput, type PCBPlatedHole, type PCBPlatedHoleInput, type PCBPort, type PCBPortInput, type PCBPortNotMatchedError, type PCBPortNotMatchedErrorInput, type PCBSMTPad, type PCBSMTPadInput, type PCBText, type PCBTextInput, type PCBTrace, type PCBTraceError, type PCBTraceErrorInput, type PCBTraceInput, type PCBVia, type PCBViaInput, type PcbFabricationNotePath, type PcbFabricationNotePathInput, type PcbFabricationNoteText, type PcbFabricationNoteTextInput, type PcbRouteHint, type PcbRouteHintInput, type PcbRouteHints, type PcbRouteHintsInput, type PcbSilkscreenCircle, type PcbSilkscreenCircleInput, type PcbSilkscreenLine, type PcbSilkscreenLineInput, type PcbSilkscreenOval, type PcbSilkscreenOvalInput, type PcbSilkscreenPath, type PcbSilkscreenPathInput, type PcbSilkscreenRect, type PcbSilkscreenRectInput, type PcbSilkscreenText, type PcbSilkscreenTextInput, type PcbTraceHint, type PcbTraceHintInput, type Point, type Point3, type Position, type RouteHintPoint, type RouteHintPointInput, type SchematicBox, type SchematicBoxInput, type SchematicComponent, type SchematicComponentInput, type SchematicError, type SchematicErrorInput, type SchematicLine, type SchematicLineInput, type SchematicNetLabel, type SchematicNetLabelInput, type SchematicPath, type SchematicPathInput, type SchematicPort, type SchematicPortInput, type SchematicText, type SchematicTextInput, type SchematicTrace, type SchematicTraceInput, type Size, type SourceComponentBase, type SourceGroup, type SourceGroupInput, type SourceLed, type SourceLedInput, type SourceNet, type SourceNetInput, type SourcePort, type SourceSimpleBug, type SourceSimpleBugInput, type SourceSimpleCapacitor, type SourceSimpleCapacitorInput, type SourceSimpleDiode, type SourceSimpleDiodeInput, type SourceSimpleGround, type SourceSimpleGroundInput, type SourceSimpleInductor, type SourceSimpleInductorInput, type SourceSimplePowerSource, type SourceSimplePowerSourceInput, type SourceSimpleResistor, type SourceSimpleResistorInput, type SourceTrace, type SupplierName, type VisibleLayerRef, all_layers, any_soup_element, any_source_component, cad_component, capacitance, current, distance, inductance, layer_ref, layer_string, length, pcb_board, pcb_component, pcb_fabrication_note_path, pcb_fabrication_note_text, pcb_hole, pcb_placement_error, pcb_plated_hole, pcb_port, pcb_port_not_matched_error, pcb_route_hint, pcb_route_hints, pcb_silkscreen_circle, pcb_silkscreen_line, pcb_silkscreen_oval, pcb_silkscreen_path, pcb_silkscreen_rect, pcb_silkscreen_text, pcb_smtpad, pcb_text, pcb_trace, pcb_trace_error, pcb_trace_hint, pcb_via, point, point3, position, position3, resistance, rotation, route_hint_point, schematic_box, schematic_component, schematic_error, schematic_line, schematic_net_label, schematic_path, schematic_port, schematic_text, schematic_trace, size, source_component_base, source_group, source_led, source_net, source_port, source_simple_bug, source_simple_capacitor, source_simple_diode, source_simple_ground, source_simple_power_source, source_simple_resistor, source_trace, supplier_name, time, visible_layer, voltage };
